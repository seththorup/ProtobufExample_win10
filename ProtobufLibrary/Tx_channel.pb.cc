// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tx_channel.proto

#include "Tx_channel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CNES {
namespace messages {
PROTOBUF_CONSTEXPR Tx_channel::Tx_channel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.band_id_)*/{}
  , /*decltype(_impl_._band_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.freq_start_khz_)*/{}
  , /*decltype(_impl_.freq_end_khz_)*/{}
  , /*decltype(_impl_.active_ant_ids_)*/{}
  , /*decltype(_impl_._active_ant_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.band_feedloss_db_)*/{}
  , /*decltype(_impl_.current_frequency_khz_)*/uint64_t{0u}
  , /*decltype(_impl_.link_rate_bps_)*/uint64_t{0u}
  , /*decltype(_impl_.requested_link_rate_bps_)*/uint64_t{0u}
  , /*decltype(_impl_.percentage_ant_power_)*/0
  , /*decltype(_impl_.tx_power_dbm_)*/0
  , /*decltype(_impl_.max_power_dbm_)*/0
  , /*decltype(_impl_.pgi_)*/0u
  , /*decltype(_impl_.data_path_id_)*/0u
  , /*decltype(_impl_.data_rate_bps_)*/uint64_t{0u}
  , /*decltype(_impl_.noise_figure_)*/0
  , /*decltype(_impl_.bandwidth_mhz_)*/0
  , /*decltype(_impl_.current_band_id_)*/0u
  , /*decltype(_impl_.sequence_number_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Tx_channelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tx_channelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tx_channelDefaultTypeInternal() {}
  union {
    Tx_channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tx_channelDefaultTypeInternal _Tx_channel_default_instance_;
}  // namespace messages
}  // namespace CNES
static ::_pb::Metadata file_level_metadata_Tx_5fchannel_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Tx_5fchannel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Tx_5fchannel_2eproto = nullptr;

const uint32_t TableStruct_Tx_5fchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.current_frequency_khz_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.link_rate_bps_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.requested_link_rate_bps_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.pgi_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.percentage_ant_power_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.tx_power_dbm_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.max_power_dbm_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.data_rate_bps_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.noise_figure_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.bandwidth_mhz_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.data_path_id_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.band_id_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.freq_start_khz_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.freq_end_khz_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.current_band_id_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.active_ant_ids_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Tx_channel, _impl_.band_feedloss_db_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CNES::messages::Tx_channel)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CNES::messages::_Tx_channel_default_instance_._instance,
};

const char descriptor_table_protodef_Tx_5fchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Tx_channel.proto\022\rCNES.messages\"\270\003\n\nTx"
  "_channel\022\035\n\025current_frequency_kHz\030\004 \001(\004\022"
  "\025\n\rlink_rate_bps\030\006 \001(\004\022\037\n\027requested_link"
  "_rate_bps\030\007 \001(\004\022\013\n\003pgi\030\010 \001(\r\022\034\n\024percenta"
  "ge_ant_power\030\t \001(\001\022\024\n\014tx_power_dbm\030\n \001(\001"
  "\022\025\n\rmax_power_dbm\030\013 \001(\001\022\025\n\rdata_rate_bps"
  "\030\014 \001(\004\022\024\n\014noise_figure\030\r \001(\001\022\025\n\rbandwidt"
  "h_mhz\030\016 \001(\001\022\024\n\014data_path_id\030\017 \001(\r\022\017\n\007ban"
  "d_id\030\020 \003(\r\022\026\n\016freq_start_khz\030\021 \003(\001\022\024\n\014fr"
  "eq_end_khz\030\022 \003(\001\022\027\n\017current_band_id\030\023 \001("
  "\r\022\026\n\016active_ant_ids\030\024 \003(\r\022\027\n\017sequence_nu"
  "mber\030\025 \001(\r\022\030\n\020band_feedloss_db\030\026 \003(\002b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_Tx_5fchannel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Tx_5fchannel_2eproto = {
    false, false, 484, descriptor_table_protodef_Tx_5fchannel_2eproto,
    "Tx_channel.proto",
    &descriptor_table_Tx_5fchannel_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_Tx_5fchannel_2eproto::offsets,
    file_level_metadata_Tx_5fchannel_2eproto, file_level_enum_descriptors_Tx_5fchannel_2eproto,
    file_level_service_descriptors_Tx_5fchannel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Tx_5fchannel_2eproto_getter() {
  return &descriptor_table_Tx_5fchannel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Tx_5fchannel_2eproto(&descriptor_table_Tx_5fchannel_2eproto);
namespace CNES {
namespace messages {

// ===================================================================

class Tx_channel::_Internal {
 public:
};

Tx_channel::Tx_channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNES.messages.Tx_channel)
}
Tx_channel::Tx_channel(const Tx_channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tx_channel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.band_id_){from._impl_.band_id_}
    , /*decltype(_impl_._band_id_cached_byte_size_)*/{0}
    , decltype(_impl_.freq_start_khz_){from._impl_.freq_start_khz_}
    , decltype(_impl_.freq_end_khz_){from._impl_.freq_end_khz_}
    , decltype(_impl_.active_ant_ids_){from._impl_.active_ant_ids_}
    , /*decltype(_impl_._active_ant_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.band_feedloss_db_){from._impl_.band_feedloss_db_}
    , decltype(_impl_.current_frequency_khz_){}
    , decltype(_impl_.link_rate_bps_){}
    , decltype(_impl_.requested_link_rate_bps_){}
    , decltype(_impl_.percentage_ant_power_){}
    , decltype(_impl_.tx_power_dbm_){}
    , decltype(_impl_.max_power_dbm_){}
    , decltype(_impl_.pgi_){}
    , decltype(_impl_.data_path_id_){}
    , decltype(_impl_.data_rate_bps_){}
    , decltype(_impl_.noise_figure_){}
    , decltype(_impl_.bandwidth_mhz_){}
    , decltype(_impl_.current_band_id_){}
    , decltype(_impl_.sequence_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_frequency_khz_, &from._impl_.current_frequency_khz_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequence_number_) -
    reinterpret_cast<char*>(&_impl_.current_frequency_khz_)) + sizeof(_impl_.sequence_number_));
  // @@protoc_insertion_point(copy_constructor:CNES.messages.Tx_channel)
}

inline void Tx_channel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.band_id_){arena}
    , /*decltype(_impl_._band_id_cached_byte_size_)*/{0}
    , decltype(_impl_.freq_start_khz_){arena}
    , decltype(_impl_.freq_end_khz_){arena}
    , decltype(_impl_.active_ant_ids_){arena}
    , /*decltype(_impl_._active_ant_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.band_feedloss_db_){arena}
    , decltype(_impl_.current_frequency_khz_){uint64_t{0u}}
    , decltype(_impl_.link_rate_bps_){uint64_t{0u}}
    , decltype(_impl_.requested_link_rate_bps_){uint64_t{0u}}
    , decltype(_impl_.percentage_ant_power_){0}
    , decltype(_impl_.tx_power_dbm_){0}
    , decltype(_impl_.max_power_dbm_){0}
    , decltype(_impl_.pgi_){0u}
    , decltype(_impl_.data_path_id_){0u}
    , decltype(_impl_.data_rate_bps_){uint64_t{0u}}
    , decltype(_impl_.noise_figure_){0}
    , decltype(_impl_.bandwidth_mhz_){0}
    , decltype(_impl_.current_band_id_){0u}
    , decltype(_impl_.sequence_number_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tx_channel::~Tx_channel() {
  // @@protoc_insertion_point(destructor:CNES.messages.Tx_channel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tx_channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.band_id_.~RepeatedField();
  _impl_.freq_start_khz_.~RepeatedField();
  _impl_.freq_end_khz_.~RepeatedField();
  _impl_.active_ant_ids_.~RepeatedField();
  _impl_.band_feedloss_db_.~RepeatedField();
}

void Tx_channel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tx_channel::Clear() {
// @@protoc_insertion_point(message_clear_start:CNES.messages.Tx_channel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.band_id_.Clear();
  _impl_.freq_start_khz_.Clear();
  _impl_.freq_end_khz_.Clear();
  _impl_.active_ant_ids_.Clear();
  _impl_.band_feedloss_db_.Clear();
  ::memset(&_impl_.current_frequency_khz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_number_) -
      reinterpret_cast<char*>(&_impl_.current_frequency_khz_)) + sizeof(_impl_.sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tx_channel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 current_frequency_kHz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.current_frequency_khz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 link_rate_bps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.link_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 requested_link_rate_bps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.requested_link_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pgi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pgi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double percentage_ant_power = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.percentage_ant_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tx_power_dbm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.tx_power_dbm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_power_dbm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.max_power_dbm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 data_rate_bps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.data_rate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double noise_figure = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.noise_figure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bandwidth_mhz = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.bandwidth_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_path_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.data_path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 band_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_band_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_band_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double freq_start_khz = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_freq_start_khz(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 137) {
          _internal_add_freq_start_khz(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double freq_end_khz = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_freq_end_khz(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 145) {
          _internal_add_freq_end_khz(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_band_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.current_band_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 active_ant_ids = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_active_ant_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_active_ant_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_number = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float band_feedloss_db = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_band_feedloss_db(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 181) {
          _internal_add_band_feedloss_db(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tx_channel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNES.messages.Tx_channel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_frequency_kHz = 4;
  if (this->_internal_current_frequency_khz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_current_frequency_khz(), target);
  }

  // uint64 link_rate_bps = 6;
  if (this->_internal_link_rate_bps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_link_rate_bps(), target);
  }

  // uint64 requested_link_rate_bps = 7;
  if (this->_internal_requested_link_rate_bps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_requested_link_rate_bps(), target);
  }

  // uint32 pgi = 8;
  if (this->_internal_pgi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pgi(), target);
  }

  // double percentage_ant_power = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage_ant_power = this->_internal_percentage_ant_power();
  uint64_t raw_percentage_ant_power;
  memcpy(&raw_percentage_ant_power, &tmp_percentage_ant_power, sizeof(tmp_percentage_ant_power));
  if (raw_percentage_ant_power != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_percentage_ant_power(), target);
  }

  // double tx_power_dbm = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_dbm = this->_internal_tx_power_dbm();
  uint64_t raw_tx_power_dbm;
  memcpy(&raw_tx_power_dbm, &tmp_tx_power_dbm, sizeof(tmp_tx_power_dbm));
  if (raw_tx_power_dbm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_tx_power_dbm(), target);
  }

  // double max_power_dbm = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_power_dbm = this->_internal_max_power_dbm();
  uint64_t raw_max_power_dbm;
  memcpy(&raw_max_power_dbm, &tmp_max_power_dbm, sizeof(tmp_max_power_dbm));
  if (raw_max_power_dbm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_power_dbm(), target);
  }

  // uint64 data_rate_bps = 12;
  if (this->_internal_data_rate_bps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_data_rate_bps(), target);
  }

  // double noise_figure = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noise_figure = this->_internal_noise_figure();
  uint64_t raw_noise_figure;
  memcpy(&raw_noise_figure, &tmp_noise_figure, sizeof(tmp_noise_figure));
  if (raw_noise_figure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_noise_figure(), target);
  }

  // double bandwidth_mhz = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bandwidth_mhz = this->_internal_bandwidth_mhz();
  uint64_t raw_bandwidth_mhz;
  memcpy(&raw_bandwidth_mhz, &tmp_bandwidth_mhz, sizeof(tmp_bandwidth_mhz));
  if (raw_bandwidth_mhz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_bandwidth_mhz(), target);
  }

  // uint32 data_path_id = 15;
  if (this->_internal_data_path_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_data_path_id(), target);
  }

  // repeated uint32 band_id = 16;
  {
    int byte_size = _impl_._band_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_band_id(), byte_size, target);
    }
  }

  // repeated double freq_start_khz = 17;
  if (this->_internal_freq_start_khz_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_freq_start_khz(), target);
  }

  // repeated double freq_end_khz = 18;
  if (this->_internal_freq_end_khz_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_freq_end_khz(), target);
  }

  // uint32 current_band_id = 19;
  if (this->_internal_current_band_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_current_band_id(), target);
  }

  // repeated uint32 active_ant_ids = 20;
  {
    int byte_size = _impl_._active_ant_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          20, _internal_active_ant_ids(), byte_size, target);
    }
  }

  // uint32 sequence_number = 21;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_sequence_number(), target);
  }

  // repeated float band_feedloss_db = 22;
  if (this->_internal_band_feedloss_db_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_band_feedloss_db(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNES.messages.Tx_channel)
  return target;
}

size_t Tx_channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNES.messages.Tx_channel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 band_id = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.band_id_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._band_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double freq_start_khz = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_freq_start_khz_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double freq_end_khz = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_freq_end_khz_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 active_ant_ids = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.active_ant_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._active_ant_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float band_feedloss_db = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_band_feedloss_db_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint64 current_frequency_kHz = 4;
  if (this->_internal_current_frequency_khz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_current_frequency_khz());
  }

  // uint64 link_rate_bps = 6;
  if (this->_internal_link_rate_bps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_link_rate_bps());
  }

  // uint64 requested_link_rate_bps = 7;
  if (this->_internal_requested_link_rate_bps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_requested_link_rate_bps());
  }

  // double percentage_ant_power = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage_ant_power = this->_internal_percentage_ant_power();
  uint64_t raw_percentage_ant_power;
  memcpy(&raw_percentage_ant_power, &tmp_percentage_ant_power, sizeof(tmp_percentage_ant_power));
  if (raw_percentage_ant_power != 0) {
    total_size += 1 + 8;
  }

  // double tx_power_dbm = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_dbm = this->_internal_tx_power_dbm();
  uint64_t raw_tx_power_dbm;
  memcpy(&raw_tx_power_dbm, &tmp_tx_power_dbm, sizeof(tmp_tx_power_dbm));
  if (raw_tx_power_dbm != 0) {
    total_size += 1 + 8;
  }

  // double max_power_dbm = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_power_dbm = this->_internal_max_power_dbm();
  uint64_t raw_max_power_dbm;
  memcpy(&raw_max_power_dbm, &tmp_max_power_dbm, sizeof(tmp_max_power_dbm));
  if (raw_max_power_dbm != 0) {
    total_size += 1 + 8;
  }

  // uint32 pgi = 8;
  if (this->_internal_pgi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pgi());
  }

  // uint32 data_path_id = 15;
  if (this->_internal_data_path_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_path_id());
  }

  // uint64 data_rate_bps = 12;
  if (this->_internal_data_rate_bps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_rate_bps());
  }

  // double noise_figure = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noise_figure = this->_internal_noise_figure();
  uint64_t raw_noise_figure;
  memcpy(&raw_noise_figure, &tmp_noise_figure, sizeof(tmp_noise_figure));
  if (raw_noise_figure != 0) {
    total_size += 1 + 8;
  }

  // double bandwidth_mhz = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bandwidth_mhz = this->_internal_bandwidth_mhz();
  uint64_t raw_bandwidth_mhz;
  memcpy(&raw_bandwidth_mhz, &tmp_bandwidth_mhz, sizeof(tmp_bandwidth_mhz));
  if (raw_bandwidth_mhz != 0) {
    total_size += 1 + 8;
  }

  // uint32 current_band_id = 19;
  if (this->_internal_current_band_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_current_band_id());
  }

  // uint32 sequence_number = 21;
  if (this->_internal_sequence_number() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tx_channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tx_channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tx_channel::GetClassData() const { return &_class_data_; }


void Tx_channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tx_channel*>(&to_msg);
  auto& from = static_cast<const Tx_channel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNES.messages.Tx_channel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.band_id_.MergeFrom(from._impl_.band_id_);
  _this->_impl_.freq_start_khz_.MergeFrom(from._impl_.freq_start_khz_);
  _this->_impl_.freq_end_khz_.MergeFrom(from._impl_.freq_end_khz_);
  _this->_impl_.active_ant_ids_.MergeFrom(from._impl_.active_ant_ids_);
  _this->_impl_.band_feedloss_db_.MergeFrom(from._impl_.band_feedloss_db_);
  if (from._internal_current_frequency_khz() != 0) {
    _this->_internal_set_current_frequency_khz(from._internal_current_frequency_khz());
  }
  if (from._internal_link_rate_bps() != 0) {
    _this->_internal_set_link_rate_bps(from._internal_link_rate_bps());
  }
  if (from._internal_requested_link_rate_bps() != 0) {
    _this->_internal_set_requested_link_rate_bps(from._internal_requested_link_rate_bps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage_ant_power = from._internal_percentage_ant_power();
  uint64_t raw_percentage_ant_power;
  memcpy(&raw_percentage_ant_power, &tmp_percentage_ant_power, sizeof(tmp_percentage_ant_power));
  if (raw_percentage_ant_power != 0) {
    _this->_internal_set_percentage_ant_power(from._internal_percentage_ant_power());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_dbm = from._internal_tx_power_dbm();
  uint64_t raw_tx_power_dbm;
  memcpy(&raw_tx_power_dbm, &tmp_tx_power_dbm, sizeof(tmp_tx_power_dbm));
  if (raw_tx_power_dbm != 0) {
    _this->_internal_set_tx_power_dbm(from._internal_tx_power_dbm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_power_dbm = from._internal_max_power_dbm();
  uint64_t raw_max_power_dbm;
  memcpy(&raw_max_power_dbm, &tmp_max_power_dbm, sizeof(tmp_max_power_dbm));
  if (raw_max_power_dbm != 0) {
    _this->_internal_set_max_power_dbm(from._internal_max_power_dbm());
  }
  if (from._internal_pgi() != 0) {
    _this->_internal_set_pgi(from._internal_pgi());
  }
  if (from._internal_data_path_id() != 0) {
    _this->_internal_set_data_path_id(from._internal_data_path_id());
  }
  if (from._internal_data_rate_bps() != 0) {
    _this->_internal_set_data_rate_bps(from._internal_data_rate_bps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noise_figure = from._internal_noise_figure();
  uint64_t raw_noise_figure;
  memcpy(&raw_noise_figure, &tmp_noise_figure, sizeof(tmp_noise_figure));
  if (raw_noise_figure != 0) {
    _this->_internal_set_noise_figure(from._internal_noise_figure());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bandwidth_mhz = from._internal_bandwidth_mhz();
  uint64_t raw_bandwidth_mhz;
  memcpy(&raw_bandwidth_mhz, &tmp_bandwidth_mhz, sizeof(tmp_bandwidth_mhz));
  if (raw_bandwidth_mhz != 0) {
    _this->_internal_set_bandwidth_mhz(from._internal_bandwidth_mhz());
  }
  if (from._internal_current_band_id() != 0) {
    _this->_internal_set_current_band_id(from._internal_current_band_id());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tx_channel::CopyFrom(const Tx_channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNES.messages.Tx_channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tx_channel::IsInitialized() const {
  return true;
}

void Tx_channel::InternalSwap(Tx_channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.band_id_.InternalSwap(&other->_impl_.band_id_);
  _impl_.freq_start_khz_.InternalSwap(&other->_impl_.freq_start_khz_);
  _impl_.freq_end_khz_.InternalSwap(&other->_impl_.freq_end_khz_);
  _impl_.active_ant_ids_.InternalSwap(&other->_impl_.active_ant_ids_);
  _impl_.band_feedloss_db_.InternalSwap(&other->_impl_.band_feedloss_db_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tx_channel, _impl_.sequence_number_)
      + sizeof(Tx_channel::_impl_.sequence_number_)
      - PROTOBUF_FIELD_OFFSET(Tx_channel, _impl_.current_frequency_khz_)>(
          reinterpret_cast<char*>(&_impl_.current_frequency_khz_),
          reinterpret_cast<char*>(&other->_impl_.current_frequency_khz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tx_channel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Tx_5fchannel_2eproto_getter, &descriptor_table_Tx_5fchannel_2eproto_once,
      file_level_metadata_Tx_5fchannel_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace CNES
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CNES::messages::Tx_channel*
Arena::CreateMaybeMessage< ::CNES::messages::Tx_channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNES::messages::Tx_channel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

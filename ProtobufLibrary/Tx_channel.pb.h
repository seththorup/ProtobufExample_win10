// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tx_channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Tx_5fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Tx_5fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Tx_5fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Tx_5fchannel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tx_5fchannel_2eproto;
namespace CNES {
namespace messages {
class Tx_channel;
struct Tx_channelDefaultTypeInternal;
extern Tx_channelDefaultTypeInternal _Tx_channel_default_instance_;
}  // namespace messages
}  // namespace CNES
PROTOBUF_NAMESPACE_OPEN
template<> ::CNES::messages::Tx_channel* Arena::CreateMaybeMessage<::CNES::messages::Tx_channel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CNES {
namespace messages {

// ===================================================================

class Tx_channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNES.messages.Tx_channel) */ {
 public:
  inline Tx_channel() : Tx_channel(nullptr) {}
  ~Tx_channel() override;
  explicit PROTOBUF_CONSTEXPR Tx_channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tx_channel(const Tx_channel& from);
  Tx_channel(Tx_channel&& from) noexcept
    : Tx_channel() {
    *this = ::std::move(from);
  }

  inline Tx_channel& operator=(const Tx_channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tx_channel& operator=(Tx_channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tx_channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tx_channel* internal_default_instance() {
    return reinterpret_cast<const Tx_channel*>(
               &_Tx_channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tx_channel& a, Tx_channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Tx_channel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tx_channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tx_channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tx_channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tx_channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tx_channel& from) {
    Tx_channel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tx_channel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNES.messages.Tx_channel";
  }
  protected:
  explicit Tx_channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandIdFieldNumber = 16,
    kFreqStartKhzFieldNumber = 17,
    kFreqEndKhzFieldNumber = 18,
    kActiveAntIdsFieldNumber = 20,
    kBandFeedlossDbFieldNumber = 22,
    kCurrentFrequencyKHzFieldNumber = 4,
    kLinkRateBpsFieldNumber = 6,
    kRequestedLinkRateBpsFieldNumber = 7,
    kPercentageAntPowerFieldNumber = 9,
    kTxPowerDbmFieldNumber = 10,
    kMaxPowerDbmFieldNumber = 11,
    kPgiFieldNumber = 8,
    kDataPathIdFieldNumber = 15,
    kDataRateBpsFieldNumber = 12,
    kNoiseFigureFieldNumber = 13,
    kBandwidthMhzFieldNumber = 14,
    kCurrentBandIdFieldNumber = 19,
    kSequenceNumberFieldNumber = 21,
  };
  // repeated uint32 band_id = 16;
  int band_id_size() const;
  private:
  int _internal_band_id_size() const;
  public:
  void clear_band_id();
  private:
  uint32_t _internal_band_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_band_id() const;
  void _internal_add_band_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_band_id();
  public:
  uint32_t band_id(int index) const;
  void set_band_id(int index, uint32_t value);
  void add_band_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      band_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_band_id();

  // repeated double freq_start_khz = 17;
  int freq_start_khz_size() const;
  private:
  int _internal_freq_start_khz_size() const;
  public:
  void clear_freq_start_khz();
  private:
  double _internal_freq_start_khz(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_freq_start_khz() const;
  void _internal_add_freq_start_khz(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_freq_start_khz();
  public:
  double freq_start_khz(int index) const;
  void set_freq_start_khz(int index, double value);
  void add_freq_start_khz(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      freq_start_khz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_freq_start_khz();

  // repeated double freq_end_khz = 18;
  int freq_end_khz_size() const;
  private:
  int _internal_freq_end_khz_size() const;
  public:
  void clear_freq_end_khz();
  private:
  double _internal_freq_end_khz(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_freq_end_khz() const;
  void _internal_add_freq_end_khz(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_freq_end_khz();
  public:
  double freq_end_khz(int index) const;
  void set_freq_end_khz(int index, double value);
  void add_freq_end_khz(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      freq_end_khz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_freq_end_khz();

  // repeated uint32 active_ant_ids = 20;
  int active_ant_ids_size() const;
  private:
  int _internal_active_ant_ids_size() const;
  public:
  void clear_active_ant_ids();
  private:
  uint32_t _internal_active_ant_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_active_ant_ids() const;
  void _internal_add_active_ant_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_active_ant_ids();
  public:
  uint32_t active_ant_ids(int index) const;
  void set_active_ant_ids(int index, uint32_t value);
  void add_active_ant_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      active_ant_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_active_ant_ids();

  // repeated float band_feedloss_db = 22;
  int band_feedloss_db_size() const;
  private:
  int _internal_band_feedloss_db_size() const;
  public:
  void clear_band_feedloss_db();
  private:
  float _internal_band_feedloss_db(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_band_feedloss_db() const;
  void _internal_add_band_feedloss_db(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_band_feedloss_db();
  public:
  float band_feedloss_db(int index) const;
  void set_band_feedloss_db(int index, float value);
  void add_band_feedloss_db(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      band_feedloss_db() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_band_feedloss_db();

  // uint64 current_frequency_kHz = 4;
  void clear_current_frequency_khz();
  uint64_t current_frequency_khz() const;
  void set_current_frequency_khz(uint64_t value);
  private:
  uint64_t _internal_current_frequency_khz() const;
  void _internal_set_current_frequency_khz(uint64_t value);
  public:

  // uint64 link_rate_bps = 6;
  void clear_link_rate_bps();
  uint64_t link_rate_bps() const;
  void set_link_rate_bps(uint64_t value);
  private:
  uint64_t _internal_link_rate_bps() const;
  void _internal_set_link_rate_bps(uint64_t value);
  public:

  // uint64 requested_link_rate_bps = 7;
  void clear_requested_link_rate_bps();
  uint64_t requested_link_rate_bps() const;
  void set_requested_link_rate_bps(uint64_t value);
  private:
  uint64_t _internal_requested_link_rate_bps() const;
  void _internal_set_requested_link_rate_bps(uint64_t value);
  public:

  // double percentage_ant_power = 9;
  void clear_percentage_ant_power();
  double percentage_ant_power() const;
  void set_percentage_ant_power(double value);
  private:
  double _internal_percentage_ant_power() const;
  void _internal_set_percentage_ant_power(double value);
  public:

  // double tx_power_dbm = 10;
  void clear_tx_power_dbm();
  double tx_power_dbm() const;
  void set_tx_power_dbm(double value);
  private:
  double _internal_tx_power_dbm() const;
  void _internal_set_tx_power_dbm(double value);
  public:

  // double max_power_dbm = 11;
  void clear_max_power_dbm();
  double max_power_dbm() const;
  void set_max_power_dbm(double value);
  private:
  double _internal_max_power_dbm() const;
  void _internal_set_max_power_dbm(double value);
  public:

  // uint32 pgi = 8;
  void clear_pgi();
  uint32_t pgi() const;
  void set_pgi(uint32_t value);
  private:
  uint32_t _internal_pgi() const;
  void _internal_set_pgi(uint32_t value);
  public:

  // uint32 data_path_id = 15;
  void clear_data_path_id();
  uint32_t data_path_id() const;
  void set_data_path_id(uint32_t value);
  private:
  uint32_t _internal_data_path_id() const;
  void _internal_set_data_path_id(uint32_t value);
  public:

  // uint64 data_rate_bps = 12;
  void clear_data_rate_bps();
  uint64_t data_rate_bps() const;
  void set_data_rate_bps(uint64_t value);
  private:
  uint64_t _internal_data_rate_bps() const;
  void _internal_set_data_rate_bps(uint64_t value);
  public:

  // double noise_figure = 13;
  void clear_noise_figure();
  double noise_figure() const;
  void set_noise_figure(double value);
  private:
  double _internal_noise_figure() const;
  void _internal_set_noise_figure(double value);
  public:

  // double bandwidth_mhz = 14;
  void clear_bandwidth_mhz();
  double bandwidth_mhz() const;
  void set_bandwidth_mhz(double value);
  private:
  double _internal_bandwidth_mhz() const;
  void _internal_set_bandwidth_mhz(double value);
  public:

  // uint32 current_band_id = 19;
  void clear_current_band_id();
  uint32_t current_band_id() const;
  void set_current_band_id(uint32_t value);
  private:
  uint32_t _internal_current_band_id() const;
  void _internal_set_current_band_id(uint32_t value);
  public:

  // uint32 sequence_number = 21;
  void clear_sequence_number();
  uint32_t sequence_number() const;
  void set_sequence_number(uint32_t value);
  private:
  uint32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CNES.messages.Tx_channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > band_id_;
    mutable std::atomic<int> _band_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > freq_start_khz_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > freq_end_khz_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > active_ant_ids_;
    mutable std::atomic<int> _active_ant_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > band_feedloss_db_;
    uint64_t current_frequency_khz_;
    uint64_t link_rate_bps_;
    uint64_t requested_link_rate_bps_;
    double percentage_ant_power_;
    double tx_power_dbm_;
    double max_power_dbm_;
    uint32_t pgi_;
    uint32_t data_path_id_;
    uint64_t data_rate_bps_;
    double noise_figure_;
    double bandwidth_mhz_;
    uint32_t current_band_id_;
    uint32_t sequence_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tx_5fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tx_channel

// uint64 current_frequency_kHz = 4;
inline void Tx_channel::clear_current_frequency_khz() {
  _impl_.current_frequency_khz_ = uint64_t{0u};
}
inline uint64_t Tx_channel::_internal_current_frequency_khz() const {
  return _impl_.current_frequency_khz_;
}
inline uint64_t Tx_channel::current_frequency_khz() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.current_frequency_kHz)
  return _internal_current_frequency_khz();
}
inline void Tx_channel::_internal_set_current_frequency_khz(uint64_t value) {
  
  _impl_.current_frequency_khz_ = value;
}
inline void Tx_channel::set_current_frequency_khz(uint64_t value) {
  _internal_set_current_frequency_khz(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.current_frequency_kHz)
}

// uint64 link_rate_bps = 6;
inline void Tx_channel::clear_link_rate_bps() {
  _impl_.link_rate_bps_ = uint64_t{0u};
}
inline uint64_t Tx_channel::_internal_link_rate_bps() const {
  return _impl_.link_rate_bps_;
}
inline uint64_t Tx_channel::link_rate_bps() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.link_rate_bps)
  return _internal_link_rate_bps();
}
inline void Tx_channel::_internal_set_link_rate_bps(uint64_t value) {
  
  _impl_.link_rate_bps_ = value;
}
inline void Tx_channel::set_link_rate_bps(uint64_t value) {
  _internal_set_link_rate_bps(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.link_rate_bps)
}

// uint64 requested_link_rate_bps = 7;
inline void Tx_channel::clear_requested_link_rate_bps() {
  _impl_.requested_link_rate_bps_ = uint64_t{0u};
}
inline uint64_t Tx_channel::_internal_requested_link_rate_bps() const {
  return _impl_.requested_link_rate_bps_;
}
inline uint64_t Tx_channel::requested_link_rate_bps() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.requested_link_rate_bps)
  return _internal_requested_link_rate_bps();
}
inline void Tx_channel::_internal_set_requested_link_rate_bps(uint64_t value) {
  
  _impl_.requested_link_rate_bps_ = value;
}
inline void Tx_channel::set_requested_link_rate_bps(uint64_t value) {
  _internal_set_requested_link_rate_bps(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.requested_link_rate_bps)
}

// uint32 pgi = 8;
inline void Tx_channel::clear_pgi() {
  _impl_.pgi_ = 0u;
}
inline uint32_t Tx_channel::_internal_pgi() const {
  return _impl_.pgi_;
}
inline uint32_t Tx_channel::pgi() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.pgi)
  return _internal_pgi();
}
inline void Tx_channel::_internal_set_pgi(uint32_t value) {
  
  _impl_.pgi_ = value;
}
inline void Tx_channel::set_pgi(uint32_t value) {
  _internal_set_pgi(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.pgi)
}

// double percentage_ant_power = 9;
inline void Tx_channel::clear_percentage_ant_power() {
  _impl_.percentage_ant_power_ = 0;
}
inline double Tx_channel::_internal_percentage_ant_power() const {
  return _impl_.percentage_ant_power_;
}
inline double Tx_channel::percentage_ant_power() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.percentage_ant_power)
  return _internal_percentage_ant_power();
}
inline void Tx_channel::_internal_set_percentage_ant_power(double value) {
  
  _impl_.percentage_ant_power_ = value;
}
inline void Tx_channel::set_percentage_ant_power(double value) {
  _internal_set_percentage_ant_power(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.percentage_ant_power)
}

// double tx_power_dbm = 10;
inline void Tx_channel::clear_tx_power_dbm() {
  _impl_.tx_power_dbm_ = 0;
}
inline double Tx_channel::_internal_tx_power_dbm() const {
  return _impl_.tx_power_dbm_;
}
inline double Tx_channel::tx_power_dbm() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.tx_power_dbm)
  return _internal_tx_power_dbm();
}
inline void Tx_channel::_internal_set_tx_power_dbm(double value) {
  
  _impl_.tx_power_dbm_ = value;
}
inline void Tx_channel::set_tx_power_dbm(double value) {
  _internal_set_tx_power_dbm(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.tx_power_dbm)
}

// double max_power_dbm = 11;
inline void Tx_channel::clear_max_power_dbm() {
  _impl_.max_power_dbm_ = 0;
}
inline double Tx_channel::_internal_max_power_dbm() const {
  return _impl_.max_power_dbm_;
}
inline double Tx_channel::max_power_dbm() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.max_power_dbm)
  return _internal_max_power_dbm();
}
inline void Tx_channel::_internal_set_max_power_dbm(double value) {
  
  _impl_.max_power_dbm_ = value;
}
inline void Tx_channel::set_max_power_dbm(double value) {
  _internal_set_max_power_dbm(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.max_power_dbm)
}

// uint64 data_rate_bps = 12;
inline void Tx_channel::clear_data_rate_bps() {
  _impl_.data_rate_bps_ = uint64_t{0u};
}
inline uint64_t Tx_channel::_internal_data_rate_bps() const {
  return _impl_.data_rate_bps_;
}
inline uint64_t Tx_channel::data_rate_bps() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.data_rate_bps)
  return _internal_data_rate_bps();
}
inline void Tx_channel::_internal_set_data_rate_bps(uint64_t value) {
  
  _impl_.data_rate_bps_ = value;
}
inline void Tx_channel::set_data_rate_bps(uint64_t value) {
  _internal_set_data_rate_bps(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.data_rate_bps)
}

// double noise_figure = 13;
inline void Tx_channel::clear_noise_figure() {
  _impl_.noise_figure_ = 0;
}
inline double Tx_channel::_internal_noise_figure() const {
  return _impl_.noise_figure_;
}
inline double Tx_channel::noise_figure() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.noise_figure)
  return _internal_noise_figure();
}
inline void Tx_channel::_internal_set_noise_figure(double value) {
  
  _impl_.noise_figure_ = value;
}
inline void Tx_channel::set_noise_figure(double value) {
  _internal_set_noise_figure(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.noise_figure)
}

// double bandwidth_mhz = 14;
inline void Tx_channel::clear_bandwidth_mhz() {
  _impl_.bandwidth_mhz_ = 0;
}
inline double Tx_channel::_internal_bandwidth_mhz() const {
  return _impl_.bandwidth_mhz_;
}
inline double Tx_channel::bandwidth_mhz() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.bandwidth_mhz)
  return _internal_bandwidth_mhz();
}
inline void Tx_channel::_internal_set_bandwidth_mhz(double value) {
  
  _impl_.bandwidth_mhz_ = value;
}
inline void Tx_channel::set_bandwidth_mhz(double value) {
  _internal_set_bandwidth_mhz(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.bandwidth_mhz)
}

// uint32 data_path_id = 15;
inline void Tx_channel::clear_data_path_id() {
  _impl_.data_path_id_ = 0u;
}
inline uint32_t Tx_channel::_internal_data_path_id() const {
  return _impl_.data_path_id_;
}
inline uint32_t Tx_channel::data_path_id() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.data_path_id)
  return _internal_data_path_id();
}
inline void Tx_channel::_internal_set_data_path_id(uint32_t value) {
  
  _impl_.data_path_id_ = value;
}
inline void Tx_channel::set_data_path_id(uint32_t value) {
  _internal_set_data_path_id(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.data_path_id)
}

// repeated uint32 band_id = 16;
inline int Tx_channel::_internal_band_id_size() const {
  return _impl_.band_id_.size();
}
inline int Tx_channel::band_id_size() const {
  return _internal_band_id_size();
}
inline void Tx_channel::clear_band_id() {
  _impl_.band_id_.Clear();
}
inline uint32_t Tx_channel::_internal_band_id(int index) const {
  return _impl_.band_id_.Get(index);
}
inline uint32_t Tx_channel::band_id(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.band_id)
  return _internal_band_id(index);
}
inline void Tx_channel::set_band_id(int index, uint32_t value) {
  _impl_.band_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.band_id)
}
inline void Tx_channel::_internal_add_band_id(uint32_t value) {
  _impl_.band_id_.Add(value);
}
inline void Tx_channel::add_band_id(uint32_t value) {
  _internal_add_band_id(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Tx_channel.band_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Tx_channel::_internal_band_id() const {
  return _impl_.band_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Tx_channel::band_id() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Tx_channel.band_id)
  return _internal_band_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Tx_channel::_internal_mutable_band_id() {
  return &_impl_.band_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Tx_channel::mutable_band_id() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Tx_channel.band_id)
  return _internal_mutable_band_id();
}

// repeated double freq_start_khz = 17;
inline int Tx_channel::_internal_freq_start_khz_size() const {
  return _impl_.freq_start_khz_.size();
}
inline int Tx_channel::freq_start_khz_size() const {
  return _internal_freq_start_khz_size();
}
inline void Tx_channel::clear_freq_start_khz() {
  _impl_.freq_start_khz_.Clear();
}
inline double Tx_channel::_internal_freq_start_khz(int index) const {
  return _impl_.freq_start_khz_.Get(index);
}
inline double Tx_channel::freq_start_khz(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.freq_start_khz)
  return _internal_freq_start_khz(index);
}
inline void Tx_channel::set_freq_start_khz(int index, double value) {
  _impl_.freq_start_khz_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.freq_start_khz)
}
inline void Tx_channel::_internal_add_freq_start_khz(double value) {
  _impl_.freq_start_khz_.Add(value);
}
inline void Tx_channel::add_freq_start_khz(double value) {
  _internal_add_freq_start_khz(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Tx_channel.freq_start_khz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tx_channel::_internal_freq_start_khz() const {
  return _impl_.freq_start_khz_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tx_channel::freq_start_khz() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Tx_channel.freq_start_khz)
  return _internal_freq_start_khz();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tx_channel::_internal_mutable_freq_start_khz() {
  return &_impl_.freq_start_khz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tx_channel::mutable_freq_start_khz() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Tx_channel.freq_start_khz)
  return _internal_mutable_freq_start_khz();
}

// repeated double freq_end_khz = 18;
inline int Tx_channel::_internal_freq_end_khz_size() const {
  return _impl_.freq_end_khz_.size();
}
inline int Tx_channel::freq_end_khz_size() const {
  return _internal_freq_end_khz_size();
}
inline void Tx_channel::clear_freq_end_khz() {
  _impl_.freq_end_khz_.Clear();
}
inline double Tx_channel::_internal_freq_end_khz(int index) const {
  return _impl_.freq_end_khz_.Get(index);
}
inline double Tx_channel::freq_end_khz(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.freq_end_khz)
  return _internal_freq_end_khz(index);
}
inline void Tx_channel::set_freq_end_khz(int index, double value) {
  _impl_.freq_end_khz_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.freq_end_khz)
}
inline void Tx_channel::_internal_add_freq_end_khz(double value) {
  _impl_.freq_end_khz_.Add(value);
}
inline void Tx_channel::add_freq_end_khz(double value) {
  _internal_add_freq_end_khz(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Tx_channel.freq_end_khz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tx_channel::_internal_freq_end_khz() const {
  return _impl_.freq_end_khz_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tx_channel::freq_end_khz() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Tx_channel.freq_end_khz)
  return _internal_freq_end_khz();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tx_channel::_internal_mutable_freq_end_khz() {
  return &_impl_.freq_end_khz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tx_channel::mutable_freq_end_khz() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Tx_channel.freq_end_khz)
  return _internal_mutable_freq_end_khz();
}

// uint32 current_band_id = 19;
inline void Tx_channel::clear_current_band_id() {
  _impl_.current_band_id_ = 0u;
}
inline uint32_t Tx_channel::_internal_current_band_id() const {
  return _impl_.current_band_id_;
}
inline uint32_t Tx_channel::current_band_id() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.current_band_id)
  return _internal_current_band_id();
}
inline void Tx_channel::_internal_set_current_band_id(uint32_t value) {
  
  _impl_.current_band_id_ = value;
}
inline void Tx_channel::set_current_band_id(uint32_t value) {
  _internal_set_current_band_id(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.current_band_id)
}

// repeated uint32 active_ant_ids = 20;
inline int Tx_channel::_internal_active_ant_ids_size() const {
  return _impl_.active_ant_ids_.size();
}
inline int Tx_channel::active_ant_ids_size() const {
  return _internal_active_ant_ids_size();
}
inline void Tx_channel::clear_active_ant_ids() {
  _impl_.active_ant_ids_.Clear();
}
inline uint32_t Tx_channel::_internal_active_ant_ids(int index) const {
  return _impl_.active_ant_ids_.Get(index);
}
inline uint32_t Tx_channel::active_ant_ids(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.active_ant_ids)
  return _internal_active_ant_ids(index);
}
inline void Tx_channel::set_active_ant_ids(int index, uint32_t value) {
  _impl_.active_ant_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.active_ant_ids)
}
inline void Tx_channel::_internal_add_active_ant_ids(uint32_t value) {
  _impl_.active_ant_ids_.Add(value);
}
inline void Tx_channel::add_active_ant_ids(uint32_t value) {
  _internal_add_active_ant_ids(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Tx_channel.active_ant_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Tx_channel::_internal_active_ant_ids() const {
  return _impl_.active_ant_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Tx_channel::active_ant_ids() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Tx_channel.active_ant_ids)
  return _internal_active_ant_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Tx_channel::_internal_mutable_active_ant_ids() {
  return &_impl_.active_ant_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Tx_channel::mutable_active_ant_ids() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Tx_channel.active_ant_ids)
  return _internal_mutable_active_ant_ids();
}

// uint32 sequence_number = 21;
inline void Tx_channel::clear_sequence_number() {
  _impl_.sequence_number_ = 0u;
}
inline uint32_t Tx_channel::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline uint32_t Tx_channel::sequence_number() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.sequence_number)
  return _internal_sequence_number();
}
inline void Tx_channel::_internal_set_sequence_number(uint32_t value) {
  
  _impl_.sequence_number_ = value;
}
inline void Tx_channel::set_sequence_number(uint32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.sequence_number)
}

// repeated float band_feedloss_db = 22;
inline int Tx_channel::_internal_band_feedloss_db_size() const {
  return _impl_.band_feedloss_db_.size();
}
inline int Tx_channel::band_feedloss_db_size() const {
  return _internal_band_feedloss_db_size();
}
inline void Tx_channel::clear_band_feedloss_db() {
  _impl_.band_feedloss_db_.Clear();
}
inline float Tx_channel::_internal_band_feedloss_db(int index) const {
  return _impl_.band_feedloss_db_.Get(index);
}
inline float Tx_channel::band_feedloss_db(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Tx_channel.band_feedloss_db)
  return _internal_band_feedloss_db(index);
}
inline void Tx_channel::set_band_feedloss_db(int index, float value) {
  _impl_.band_feedloss_db_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNES.messages.Tx_channel.band_feedloss_db)
}
inline void Tx_channel::_internal_add_band_feedloss_db(float value) {
  _impl_.band_feedloss_db_.Add(value);
}
inline void Tx_channel::add_band_feedloss_db(float value) {
  _internal_add_band_feedloss_db(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Tx_channel.band_feedloss_db)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Tx_channel::_internal_band_feedloss_db() const {
  return _impl_.band_feedloss_db_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Tx_channel::band_feedloss_db() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Tx_channel.band_feedloss_db)
  return _internal_band_feedloss_db();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Tx_channel::_internal_mutable_band_feedloss_db() {
  return &_impl_.band_feedloss_db_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Tx_channel::mutable_band_feedloss_db() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Tx_channel.band_feedloss_db)
  return _internal_mutable_band_feedloss_db();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace CNES

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Tx_5fchannel_2eproto

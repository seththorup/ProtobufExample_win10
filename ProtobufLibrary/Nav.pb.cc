// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nav.proto

#include "Nav.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CNES {
namespace messages {
PROTOBUF_CONSTEXPR Nav_BlockedNode::Nav_BlockedNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blkd_rx_node_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Nav_BlockedNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Nav_BlockedNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Nav_BlockedNodeDefaultTypeInternal() {}
  union {
    Nav_BlockedNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Nav_BlockedNodeDefaultTypeInternal _Nav_BlockedNode_default_instance_;
PROTOBUF_CONSTEXPR Nav::Nav(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.navigation_files_)*/{}
  , /*decltype(_impl_.blockage_)*/{}
  , /*decltype(_impl_.nav_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.latitude_deg_)*/0
  , /*decltype(_impl_.longitude_deg_)*/0
  , /*decltype(_impl_.altitude_m_)*/0
  , /*decltype(_impl_.heading_deg_)*/0
  , /*decltype(_impl_.pitch_deg_)*/0
  , /*decltype(_impl_.roll_deg_)*/0
  , /*decltype(_impl_.gui_node_icon_)*/0u
  , /*decltype(_impl_.nav_estimated_)*/false
  , /*decltype(_impl_.nav_time_sec_)*/0
  , /*decltype(_impl_.surface_altitude_m_)*/0
  , /*decltype(_impl_.lat_velocity_m_)*/0
  , /*decltype(_impl_.lon_velocity_m_)*/0
  , /*decltype(_impl_.alt_velocity_m_)*/0
  , /*decltype(_impl_.lat_acceleration_m_)*/0
  , /*decltype(_impl_.lon_acceleration_m_)*/0
  , /*decltype(_impl_.alt_acceleration_m_)*/0
  , /*decltype(_impl_.heading_angular_velocity_deg_)*/0
  , /*decltype(_impl_.pitch_angular_velocity_deg_)*/0
  , /*decltype(_impl_.roll_angular_velocity_deg_)*/0
  , /*decltype(_impl_.heading_angular_acceleration_deg_)*/0
  , /*decltype(_impl_.pitch_angular_acceleration_deg_)*/0
  , /*decltype(_impl_.roll_angular_acceleration_deg_)*/0
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NavDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavDefaultTypeInternal() {}
  union {
    Nav _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavDefaultTypeInternal _Nav_default_instance_;
}  // namespace messages
}  // namespace CNES
static ::_pb::Metadata file_level_metadata_Nav_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Nav_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Nav_2eproto = nullptr;

const uint32_t TableStruct_Nav_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav_BlockedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav_BlockedNode, _impl_.blkd_rx_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.nav_time_ns_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.altitude_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.heading_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.roll_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.gui_node_icon_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.nav_estimated_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.nav_time_sec_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.navigation_files_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.blockage_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.surface_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.lat_velocity_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.lon_velocity_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.alt_velocity_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.lat_acceleration_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.lon_acceleration_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.alt_acceleration_m_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.heading_angular_velocity_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.pitch_angular_velocity_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.roll_angular_velocity_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.heading_angular_acceleration_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.pitch_angular_acceleration_deg_),
  PROTOBUF_FIELD_OFFSET(::CNES::messages::Nav, _impl_.roll_angular_acceleration_deg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CNES::messages::Nav_BlockedNode)},
  { 7, -1, -1, sizeof(::CNES::messages::Nav)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CNES::messages::_Nav_BlockedNode_default_instance_._instance,
  &::CNES::messages::_Nav_default_instance_._instance,
};

const char descriptor_table_protodef_Nav_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tNav.proto\022\rCNES.messages\"\376\005\n\003Nav\022\023\n\013na"
  "v_time_ns\030\002 \001(\003\022\024\n\014latitude_deg\030\003 \001(\001\022\025\n"
  "\rlongitude_deg\030\004 \001(\001\022\022\n\naltitude_m\030\005 \001(\001"
  "\022\023\n\013heading_deg\030\006 \001(\001\022\021\n\tpitch_deg\030\007 \001(\001"
  "\022\020\n\010roll_deg\030\010 \001(\001\022\025\n\rgui_node_icon\030\t \001("
  "\r\022\025\n\rnav_estimated\030\n \001(\010\022\021\n\tentity_id\030\013 "
  "\001(\r\022\024\n\014nav_time_sec\030\014 \001(\001\022\030\n\020navigation_"
  "files\030\016 \003(\t\0220\n\010blockage\030\017 \003(\0132\036.CNES.mes"
  "sages.Nav.BlockedNode\022\032\n\022surface_altitud"
  "e_m\030\020 \001(\001\022\026\n\016lat_velocity_m\030\021 \001(\001\022\026\n\016lon"
  "_velocity_m\030\022 \001(\001\022\026\n\016alt_velocity_m\030\023 \001("
  "\001\022\032\n\022lat_acceleration_m\030\024 \001(\001\022\032\n\022lon_acc"
  "eleration_m\030\025 \001(\001\022\032\n\022alt_acceleration_m\030"
  "\026 \001(\001\022$\n\034heading_angular_velocity_deg\030\027 "
  "\001(\001\022\"\n\032pitch_angular_velocity_deg\030\030 \001(\001\022"
  "!\n\031roll_angular_velocity_deg\030\031 \001(\001\022(\n he"
  "ading_angular_acceleration_deg\030\032 \001(\001\022&\n\036"
  "pitch_angular_acceleration_deg\030\033 \001(\001\022%\n\035"
  "roll_angular_acceleration_deg\030\034 \001(\001\032&\n\013B"
  "lockedNode\022\027\n\017blkd_rx_node_id\030\001 \001(\rb\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_Nav_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Nav_2eproto = {
    false, false, 803, descriptor_table_protodef_Nav_2eproto,
    "Nav.proto",
    &descriptor_table_Nav_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Nav_2eproto::offsets,
    file_level_metadata_Nav_2eproto, file_level_enum_descriptors_Nav_2eproto,
    file_level_service_descriptors_Nav_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Nav_2eproto_getter() {
  return &descriptor_table_Nav_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Nav_2eproto(&descriptor_table_Nav_2eproto);
namespace CNES {
namespace messages {

// ===================================================================

class Nav_BlockedNode::_Internal {
 public:
};

Nav_BlockedNode::Nav_BlockedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNES.messages.Nav.BlockedNode)
}
Nav_BlockedNode::Nav_BlockedNode(const Nav_BlockedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Nav_BlockedNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blkd_rx_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.blkd_rx_node_id_ = from._impl_.blkd_rx_node_id_;
  // @@protoc_insertion_point(copy_constructor:CNES.messages.Nav.BlockedNode)
}

inline void Nav_BlockedNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blkd_rx_node_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Nav_BlockedNode::~Nav_BlockedNode() {
  // @@protoc_insertion_point(destructor:CNES.messages.Nav.BlockedNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Nav_BlockedNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Nav_BlockedNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Nav_BlockedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CNES.messages.Nav.BlockedNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blkd_rx_node_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nav_BlockedNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 blkd_rx_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blkd_rx_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Nav_BlockedNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNES.messages.Nav.BlockedNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 blkd_rx_node_id = 1;
  if (this->_internal_blkd_rx_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blkd_rx_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNES.messages.Nav.BlockedNode)
  return target;
}

size_t Nav_BlockedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNES.messages.Nav.BlockedNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 blkd_rx_node_id = 1;
  if (this->_internal_blkd_rx_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blkd_rx_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Nav_BlockedNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Nav_BlockedNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Nav_BlockedNode::GetClassData() const { return &_class_data_; }


void Nav_BlockedNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Nav_BlockedNode*>(&to_msg);
  auto& from = static_cast<const Nav_BlockedNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNES.messages.Nav.BlockedNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blkd_rx_node_id() != 0) {
    _this->_internal_set_blkd_rx_node_id(from._internal_blkd_rx_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Nav_BlockedNode::CopyFrom(const Nav_BlockedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNES.messages.Nav.BlockedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nav_BlockedNode::IsInitialized() const {
  return true;
}

void Nav_BlockedNode::InternalSwap(Nav_BlockedNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.blkd_rx_node_id_, other->_impl_.blkd_rx_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Nav_BlockedNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Nav_2eproto_getter, &descriptor_table_Nav_2eproto_once,
      file_level_metadata_Nav_2eproto[0]);
}

// ===================================================================

class Nav::_Internal {
 public:
};

Nav::Nav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNES.messages.Nav)
}
Nav::Nav(const Nav& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Nav* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.navigation_files_){from._impl_.navigation_files_}
    , decltype(_impl_.blockage_){from._impl_.blockage_}
    , decltype(_impl_.nav_time_ns_){}
    , decltype(_impl_.latitude_deg_){}
    , decltype(_impl_.longitude_deg_){}
    , decltype(_impl_.altitude_m_){}
    , decltype(_impl_.heading_deg_){}
    , decltype(_impl_.pitch_deg_){}
    , decltype(_impl_.roll_deg_){}
    , decltype(_impl_.gui_node_icon_){}
    , decltype(_impl_.nav_estimated_){}
    , decltype(_impl_.nav_time_sec_){}
    , decltype(_impl_.surface_altitude_m_){}
    , decltype(_impl_.lat_velocity_m_){}
    , decltype(_impl_.lon_velocity_m_){}
    , decltype(_impl_.alt_velocity_m_){}
    , decltype(_impl_.lat_acceleration_m_){}
    , decltype(_impl_.lon_acceleration_m_){}
    , decltype(_impl_.alt_acceleration_m_){}
    , decltype(_impl_.heading_angular_velocity_deg_){}
    , decltype(_impl_.pitch_angular_velocity_deg_){}
    , decltype(_impl_.roll_angular_velocity_deg_){}
    , decltype(_impl_.heading_angular_acceleration_deg_){}
    , decltype(_impl_.pitch_angular_acceleration_deg_){}
    , decltype(_impl_.roll_angular_acceleration_deg_){}
    , decltype(_impl_.entity_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nav_time_ns_, &from._impl_.nav_time_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_id_) -
    reinterpret_cast<char*>(&_impl_.nav_time_ns_)) + sizeof(_impl_.entity_id_));
  // @@protoc_insertion_point(copy_constructor:CNES.messages.Nav)
}

inline void Nav::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.navigation_files_){arena}
    , decltype(_impl_.blockage_){arena}
    , decltype(_impl_.nav_time_ns_){int64_t{0}}
    , decltype(_impl_.latitude_deg_){0}
    , decltype(_impl_.longitude_deg_){0}
    , decltype(_impl_.altitude_m_){0}
    , decltype(_impl_.heading_deg_){0}
    , decltype(_impl_.pitch_deg_){0}
    , decltype(_impl_.roll_deg_){0}
    , decltype(_impl_.gui_node_icon_){0u}
    , decltype(_impl_.nav_estimated_){false}
    , decltype(_impl_.nav_time_sec_){0}
    , decltype(_impl_.surface_altitude_m_){0}
    , decltype(_impl_.lat_velocity_m_){0}
    , decltype(_impl_.lon_velocity_m_){0}
    , decltype(_impl_.alt_velocity_m_){0}
    , decltype(_impl_.lat_acceleration_m_){0}
    , decltype(_impl_.lon_acceleration_m_){0}
    , decltype(_impl_.alt_acceleration_m_){0}
    , decltype(_impl_.heading_angular_velocity_deg_){0}
    , decltype(_impl_.pitch_angular_velocity_deg_){0}
    , decltype(_impl_.roll_angular_velocity_deg_){0}
    , decltype(_impl_.heading_angular_acceleration_deg_){0}
    , decltype(_impl_.pitch_angular_acceleration_deg_){0}
    , decltype(_impl_.roll_angular_acceleration_deg_){0}
    , decltype(_impl_.entity_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Nav::~Nav() {
  // @@protoc_insertion_point(destructor:CNES.messages.Nav)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Nav::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.navigation_files_.~RepeatedPtrField();
  _impl_.blockage_.~RepeatedPtrField();
}

void Nav::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Nav::Clear() {
// @@protoc_insertion_point(message_clear_start:CNES.messages.Nav)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.navigation_files_.Clear();
  _impl_.blockage_.Clear();
  ::memset(&_impl_.nav_time_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.entity_id_) -
      reinterpret_cast<char*>(&_impl_.nav_time_ns_)) + sizeof(_impl_.entity_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nav::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 nav_time_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nav_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.heading_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch_deg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll_deg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 gui_node_icon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gui_node_icon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nav_estimated = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.nav_estimated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double nav_time_sec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.nav_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string navigation_files = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_navigation_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "CNES.messages.Nav.navigation_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CNES.messages.Nav.BlockedNode blockage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blockage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double surface_altitude_m = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.surface_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lat_velocity_m = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.lat_velocity_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon_velocity_m = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.lon_velocity_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double alt_velocity_m = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.alt_velocity_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lat_acceleration_m = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.lat_acceleration_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon_acceleration_m = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.lon_acceleration_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double alt_acceleration_m = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.alt_acceleration_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_angular_velocity_deg = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.heading_angular_velocity_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch_angular_velocity_deg = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.pitch_angular_velocity_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll_angular_velocity_deg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.roll_angular_velocity_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_angular_acceleration_deg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.heading_angular_acceleration_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch_angular_acceleration_deg = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.pitch_angular_acceleration_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll_angular_acceleration_deg = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.roll_angular_acceleration_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Nav::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNES.messages.Nav)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nav_time_ns = 2;
  if (this->_internal_nav_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_nav_time_ns(), target);
  }

  // double latitude_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude_deg(), target);
  }

  // double altitude_m = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = this->_internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_altitude_m(), target);
  }

  // double heading_deg = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_deg = this->_internal_heading_deg();
  uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading_deg(), target);
  }

  // double pitch_deg = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = this->_internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_pitch_deg(), target);
  }

  // double roll_deg = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = this->_internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_roll_deg(), target);
  }

  // uint32 gui_node_icon = 9;
  if (this->_internal_gui_node_icon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gui_node_icon(), target);
  }

  // bool nav_estimated = 10;
  if (this->_internal_nav_estimated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_nav_estimated(), target);
  }

  // uint32 entity_id = 11;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_entity_id(), target);
  }

  // double nav_time_sec = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav_time_sec = this->_internal_nav_time_sec();
  uint64_t raw_nav_time_sec;
  memcpy(&raw_nav_time_sec, &tmp_nav_time_sec, sizeof(tmp_nav_time_sec));
  if (raw_nav_time_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_nav_time_sec(), target);
  }

  // repeated string navigation_files = 14;
  for (int i = 0, n = this->_internal_navigation_files_size(); i < n; i++) {
    const auto& s = this->_internal_navigation_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CNES.messages.Nav.navigation_files");
    target = stream->WriteString(14, s, target);
  }

  // repeated .CNES.messages.Nav.BlockedNode blockage = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blockage_size()); i < n; i++) {
    const auto& repfield = this->_internal_blockage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double surface_altitude_m = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_surface_altitude_m = this->_internal_surface_altitude_m();
  uint64_t raw_surface_altitude_m;
  memcpy(&raw_surface_altitude_m, &tmp_surface_altitude_m, sizeof(tmp_surface_altitude_m));
  if (raw_surface_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_surface_altitude_m(), target);
  }

  // double lat_velocity_m = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_velocity_m = this->_internal_lat_velocity_m();
  uint64_t raw_lat_velocity_m;
  memcpy(&raw_lat_velocity_m, &tmp_lat_velocity_m, sizeof(tmp_lat_velocity_m));
  if (raw_lat_velocity_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_lat_velocity_m(), target);
  }

  // double lon_velocity_m = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_velocity_m = this->_internal_lon_velocity_m();
  uint64_t raw_lon_velocity_m;
  memcpy(&raw_lon_velocity_m, &tmp_lon_velocity_m, sizeof(tmp_lon_velocity_m));
  if (raw_lon_velocity_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_lon_velocity_m(), target);
  }

  // double alt_velocity_m = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_velocity_m = this->_internal_alt_velocity_m();
  uint64_t raw_alt_velocity_m;
  memcpy(&raw_alt_velocity_m, &tmp_alt_velocity_m, sizeof(tmp_alt_velocity_m));
  if (raw_alt_velocity_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_alt_velocity_m(), target);
  }

  // double lat_acceleration_m = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_acceleration_m = this->_internal_lat_acceleration_m();
  uint64_t raw_lat_acceleration_m;
  memcpy(&raw_lat_acceleration_m, &tmp_lat_acceleration_m, sizeof(tmp_lat_acceleration_m));
  if (raw_lat_acceleration_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_lat_acceleration_m(), target);
  }

  // double lon_acceleration_m = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_acceleration_m = this->_internal_lon_acceleration_m();
  uint64_t raw_lon_acceleration_m;
  memcpy(&raw_lon_acceleration_m, &tmp_lon_acceleration_m, sizeof(tmp_lon_acceleration_m));
  if (raw_lon_acceleration_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_lon_acceleration_m(), target);
  }

  // double alt_acceleration_m = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_acceleration_m = this->_internal_alt_acceleration_m();
  uint64_t raw_alt_acceleration_m;
  memcpy(&raw_alt_acceleration_m, &tmp_alt_acceleration_m, sizeof(tmp_alt_acceleration_m));
  if (raw_alt_acceleration_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_alt_acceleration_m(), target);
  }

  // double heading_angular_velocity_deg = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_velocity_deg = this->_internal_heading_angular_velocity_deg();
  uint64_t raw_heading_angular_velocity_deg;
  memcpy(&raw_heading_angular_velocity_deg, &tmp_heading_angular_velocity_deg, sizeof(tmp_heading_angular_velocity_deg));
  if (raw_heading_angular_velocity_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_heading_angular_velocity_deg(), target);
  }

  // double pitch_angular_velocity_deg = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_velocity_deg = this->_internal_pitch_angular_velocity_deg();
  uint64_t raw_pitch_angular_velocity_deg;
  memcpy(&raw_pitch_angular_velocity_deg, &tmp_pitch_angular_velocity_deg, sizeof(tmp_pitch_angular_velocity_deg));
  if (raw_pitch_angular_velocity_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_pitch_angular_velocity_deg(), target);
  }

  // double roll_angular_velocity_deg = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_velocity_deg = this->_internal_roll_angular_velocity_deg();
  uint64_t raw_roll_angular_velocity_deg;
  memcpy(&raw_roll_angular_velocity_deg, &tmp_roll_angular_velocity_deg, sizeof(tmp_roll_angular_velocity_deg));
  if (raw_roll_angular_velocity_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_roll_angular_velocity_deg(), target);
  }

  // double heading_angular_acceleration_deg = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_acceleration_deg = this->_internal_heading_angular_acceleration_deg();
  uint64_t raw_heading_angular_acceleration_deg;
  memcpy(&raw_heading_angular_acceleration_deg, &tmp_heading_angular_acceleration_deg, sizeof(tmp_heading_angular_acceleration_deg));
  if (raw_heading_angular_acceleration_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_heading_angular_acceleration_deg(), target);
  }

  // double pitch_angular_acceleration_deg = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_acceleration_deg = this->_internal_pitch_angular_acceleration_deg();
  uint64_t raw_pitch_angular_acceleration_deg;
  memcpy(&raw_pitch_angular_acceleration_deg, &tmp_pitch_angular_acceleration_deg, sizeof(tmp_pitch_angular_acceleration_deg));
  if (raw_pitch_angular_acceleration_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_pitch_angular_acceleration_deg(), target);
  }

  // double roll_angular_acceleration_deg = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_acceleration_deg = this->_internal_roll_angular_acceleration_deg();
  uint64_t raw_roll_angular_acceleration_deg;
  memcpy(&raw_roll_angular_acceleration_deg, &tmp_roll_angular_acceleration_deg, sizeof(tmp_roll_angular_acceleration_deg));
  if (raw_roll_angular_acceleration_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_roll_angular_acceleration_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNES.messages.Nav)
  return target;
}

size_t Nav::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNES.messages.Nav)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string navigation_files = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.navigation_files_.size());
  for (int i = 0, n = _impl_.navigation_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.navigation_files_.Get(i));
  }

  // repeated .CNES.messages.Nav.BlockedNode blockage = 15;
  total_size += 1UL * this->_internal_blockage_size();
  for (const auto& msg : this->_impl_.blockage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 nav_time_ns = 2;
  if (this->_internal_nav_time_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nav_time_ns());
  }

  // double latitude_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 1 + 8;
  }

  // double altitude_m = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = this->_internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    total_size += 1 + 8;
  }

  // double heading_deg = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_deg = this->_internal_heading_deg();
  uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    total_size += 1 + 8;
  }

  // double pitch_deg = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = this->_internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 1 + 8;
  }

  // double roll_deg = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = this->_internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 1 + 8;
  }

  // uint32 gui_node_icon = 9;
  if (this->_internal_gui_node_icon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gui_node_icon());
  }

  // bool nav_estimated = 10;
  if (this->_internal_nav_estimated() != 0) {
    total_size += 1 + 1;
  }

  // double nav_time_sec = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav_time_sec = this->_internal_nav_time_sec();
  uint64_t raw_nav_time_sec;
  memcpy(&raw_nav_time_sec, &tmp_nav_time_sec, sizeof(tmp_nav_time_sec));
  if (raw_nav_time_sec != 0) {
    total_size += 1 + 8;
  }

  // double surface_altitude_m = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_surface_altitude_m = this->_internal_surface_altitude_m();
  uint64_t raw_surface_altitude_m;
  memcpy(&raw_surface_altitude_m, &tmp_surface_altitude_m, sizeof(tmp_surface_altitude_m));
  if (raw_surface_altitude_m != 0) {
    total_size += 2 + 8;
  }

  // double lat_velocity_m = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_velocity_m = this->_internal_lat_velocity_m();
  uint64_t raw_lat_velocity_m;
  memcpy(&raw_lat_velocity_m, &tmp_lat_velocity_m, sizeof(tmp_lat_velocity_m));
  if (raw_lat_velocity_m != 0) {
    total_size += 2 + 8;
  }

  // double lon_velocity_m = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_velocity_m = this->_internal_lon_velocity_m();
  uint64_t raw_lon_velocity_m;
  memcpy(&raw_lon_velocity_m, &tmp_lon_velocity_m, sizeof(tmp_lon_velocity_m));
  if (raw_lon_velocity_m != 0) {
    total_size += 2 + 8;
  }

  // double alt_velocity_m = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_velocity_m = this->_internal_alt_velocity_m();
  uint64_t raw_alt_velocity_m;
  memcpy(&raw_alt_velocity_m, &tmp_alt_velocity_m, sizeof(tmp_alt_velocity_m));
  if (raw_alt_velocity_m != 0) {
    total_size += 2 + 8;
  }

  // double lat_acceleration_m = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_acceleration_m = this->_internal_lat_acceleration_m();
  uint64_t raw_lat_acceleration_m;
  memcpy(&raw_lat_acceleration_m, &tmp_lat_acceleration_m, sizeof(tmp_lat_acceleration_m));
  if (raw_lat_acceleration_m != 0) {
    total_size += 2 + 8;
  }

  // double lon_acceleration_m = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_acceleration_m = this->_internal_lon_acceleration_m();
  uint64_t raw_lon_acceleration_m;
  memcpy(&raw_lon_acceleration_m, &tmp_lon_acceleration_m, sizeof(tmp_lon_acceleration_m));
  if (raw_lon_acceleration_m != 0) {
    total_size += 2 + 8;
  }

  // double alt_acceleration_m = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_acceleration_m = this->_internal_alt_acceleration_m();
  uint64_t raw_alt_acceleration_m;
  memcpy(&raw_alt_acceleration_m, &tmp_alt_acceleration_m, sizeof(tmp_alt_acceleration_m));
  if (raw_alt_acceleration_m != 0) {
    total_size += 2 + 8;
  }

  // double heading_angular_velocity_deg = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_velocity_deg = this->_internal_heading_angular_velocity_deg();
  uint64_t raw_heading_angular_velocity_deg;
  memcpy(&raw_heading_angular_velocity_deg, &tmp_heading_angular_velocity_deg, sizeof(tmp_heading_angular_velocity_deg));
  if (raw_heading_angular_velocity_deg != 0) {
    total_size += 2 + 8;
  }

  // double pitch_angular_velocity_deg = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_velocity_deg = this->_internal_pitch_angular_velocity_deg();
  uint64_t raw_pitch_angular_velocity_deg;
  memcpy(&raw_pitch_angular_velocity_deg, &tmp_pitch_angular_velocity_deg, sizeof(tmp_pitch_angular_velocity_deg));
  if (raw_pitch_angular_velocity_deg != 0) {
    total_size += 2 + 8;
  }

  // double roll_angular_velocity_deg = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_velocity_deg = this->_internal_roll_angular_velocity_deg();
  uint64_t raw_roll_angular_velocity_deg;
  memcpy(&raw_roll_angular_velocity_deg, &tmp_roll_angular_velocity_deg, sizeof(tmp_roll_angular_velocity_deg));
  if (raw_roll_angular_velocity_deg != 0) {
    total_size += 2 + 8;
  }

  // double heading_angular_acceleration_deg = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_acceleration_deg = this->_internal_heading_angular_acceleration_deg();
  uint64_t raw_heading_angular_acceleration_deg;
  memcpy(&raw_heading_angular_acceleration_deg, &tmp_heading_angular_acceleration_deg, sizeof(tmp_heading_angular_acceleration_deg));
  if (raw_heading_angular_acceleration_deg != 0) {
    total_size += 2 + 8;
  }

  // double pitch_angular_acceleration_deg = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_acceleration_deg = this->_internal_pitch_angular_acceleration_deg();
  uint64_t raw_pitch_angular_acceleration_deg;
  memcpy(&raw_pitch_angular_acceleration_deg, &tmp_pitch_angular_acceleration_deg, sizeof(tmp_pitch_angular_acceleration_deg));
  if (raw_pitch_angular_acceleration_deg != 0) {
    total_size += 2 + 8;
  }

  // double roll_angular_acceleration_deg = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_acceleration_deg = this->_internal_roll_angular_acceleration_deg();
  uint64_t raw_roll_angular_acceleration_deg;
  memcpy(&raw_roll_angular_acceleration_deg, &tmp_roll_angular_acceleration_deg, sizeof(tmp_roll_angular_acceleration_deg));
  if (raw_roll_angular_acceleration_deg != 0) {
    total_size += 2 + 8;
  }

  // uint32 entity_id = 11;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Nav::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Nav::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Nav::GetClassData() const { return &_class_data_; }


void Nav::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Nav*>(&to_msg);
  auto& from = static_cast<const Nav&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNES.messages.Nav)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.navigation_files_.MergeFrom(from._impl_.navigation_files_);
  _this->_impl_.blockage_.MergeFrom(from._impl_.blockage_);
  if (from._internal_nav_time_ns() != 0) {
    _this->_internal_set_nav_time_ns(from._internal_nav_time_ns());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _this->_internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _this->_internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = from._internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    _this->_internal_set_altitude_m(from._internal_altitude_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_deg = from._internal_heading_deg();
  uint64_t raw_heading_deg;
  memcpy(&raw_heading_deg, &tmp_heading_deg, sizeof(tmp_heading_deg));
  if (raw_heading_deg != 0) {
    _this->_internal_set_heading_deg(from._internal_heading_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = from._internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _this->_internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = from._internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _this->_internal_set_roll_deg(from._internal_roll_deg());
  }
  if (from._internal_gui_node_icon() != 0) {
    _this->_internal_set_gui_node_icon(from._internal_gui_node_icon());
  }
  if (from._internal_nav_estimated() != 0) {
    _this->_internal_set_nav_estimated(from._internal_nav_estimated());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nav_time_sec = from._internal_nav_time_sec();
  uint64_t raw_nav_time_sec;
  memcpy(&raw_nav_time_sec, &tmp_nav_time_sec, sizeof(tmp_nav_time_sec));
  if (raw_nav_time_sec != 0) {
    _this->_internal_set_nav_time_sec(from._internal_nav_time_sec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_surface_altitude_m = from._internal_surface_altitude_m();
  uint64_t raw_surface_altitude_m;
  memcpy(&raw_surface_altitude_m, &tmp_surface_altitude_m, sizeof(tmp_surface_altitude_m));
  if (raw_surface_altitude_m != 0) {
    _this->_internal_set_surface_altitude_m(from._internal_surface_altitude_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_velocity_m = from._internal_lat_velocity_m();
  uint64_t raw_lat_velocity_m;
  memcpy(&raw_lat_velocity_m, &tmp_lat_velocity_m, sizeof(tmp_lat_velocity_m));
  if (raw_lat_velocity_m != 0) {
    _this->_internal_set_lat_velocity_m(from._internal_lat_velocity_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_velocity_m = from._internal_lon_velocity_m();
  uint64_t raw_lon_velocity_m;
  memcpy(&raw_lon_velocity_m, &tmp_lon_velocity_m, sizeof(tmp_lon_velocity_m));
  if (raw_lon_velocity_m != 0) {
    _this->_internal_set_lon_velocity_m(from._internal_lon_velocity_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_velocity_m = from._internal_alt_velocity_m();
  uint64_t raw_alt_velocity_m;
  memcpy(&raw_alt_velocity_m, &tmp_alt_velocity_m, sizeof(tmp_alt_velocity_m));
  if (raw_alt_velocity_m != 0) {
    _this->_internal_set_alt_velocity_m(from._internal_alt_velocity_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_acceleration_m = from._internal_lat_acceleration_m();
  uint64_t raw_lat_acceleration_m;
  memcpy(&raw_lat_acceleration_m, &tmp_lat_acceleration_m, sizeof(tmp_lat_acceleration_m));
  if (raw_lat_acceleration_m != 0) {
    _this->_internal_set_lat_acceleration_m(from._internal_lat_acceleration_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_acceleration_m = from._internal_lon_acceleration_m();
  uint64_t raw_lon_acceleration_m;
  memcpy(&raw_lon_acceleration_m, &tmp_lon_acceleration_m, sizeof(tmp_lon_acceleration_m));
  if (raw_lon_acceleration_m != 0) {
    _this->_internal_set_lon_acceleration_m(from._internal_lon_acceleration_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_acceleration_m = from._internal_alt_acceleration_m();
  uint64_t raw_alt_acceleration_m;
  memcpy(&raw_alt_acceleration_m, &tmp_alt_acceleration_m, sizeof(tmp_alt_acceleration_m));
  if (raw_alt_acceleration_m != 0) {
    _this->_internal_set_alt_acceleration_m(from._internal_alt_acceleration_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_velocity_deg = from._internal_heading_angular_velocity_deg();
  uint64_t raw_heading_angular_velocity_deg;
  memcpy(&raw_heading_angular_velocity_deg, &tmp_heading_angular_velocity_deg, sizeof(tmp_heading_angular_velocity_deg));
  if (raw_heading_angular_velocity_deg != 0) {
    _this->_internal_set_heading_angular_velocity_deg(from._internal_heading_angular_velocity_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_velocity_deg = from._internal_pitch_angular_velocity_deg();
  uint64_t raw_pitch_angular_velocity_deg;
  memcpy(&raw_pitch_angular_velocity_deg, &tmp_pitch_angular_velocity_deg, sizeof(tmp_pitch_angular_velocity_deg));
  if (raw_pitch_angular_velocity_deg != 0) {
    _this->_internal_set_pitch_angular_velocity_deg(from._internal_pitch_angular_velocity_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_velocity_deg = from._internal_roll_angular_velocity_deg();
  uint64_t raw_roll_angular_velocity_deg;
  memcpy(&raw_roll_angular_velocity_deg, &tmp_roll_angular_velocity_deg, sizeof(tmp_roll_angular_velocity_deg));
  if (raw_roll_angular_velocity_deg != 0) {
    _this->_internal_set_roll_angular_velocity_deg(from._internal_roll_angular_velocity_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_angular_acceleration_deg = from._internal_heading_angular_acceleration_deg();
  uint64_t raw_heading_angular_acceleration_deg;
  memcpy(&raw_heading_angular_acceleration_deg, &tmp_heading_angular_acceleration_deg, sizeof(tmp_heading_angular_acceleration_deg));
  if (raw_heading_angular_acceleration_deg != 0) {
    _this->_internal_set_heading_angular_acceleration_deg(from._internal_heading_angular_acceleration_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_angular_acceleration_deg = from._internal_pitch_angular_acceleration_deg();
  uint64_t raw_pitch_angular_acceleration_deg;
  memcpy(&raw_pitch_angular_acceleration_deg, &tmp_pitch_angular_acceleration_deg, sizeof(tmp_pitch_angular_acceleration_deg));
  if (raw_pitch_angular_acceleration_deg != 0) {
    _this->_internal_set_pitch_angular_acceleration_deg(from._internal_pitch_angular_acceleration_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_angular_acceleration_deg = from._internal_roll_angular_acceleration_deg();
  uint64_t raw_roll_angular_acceleration_deg;
  memcpy(&raw_roll_angular_acceleration_deg, &tmp_roll_angular_acceleration_deg, sizeof(tmp_roll_angular_acceleration_deg));
  if (raw_roll_angular_acceleration_deg != 0) {
    _this->_internal_set_roll_angular_acceleration_deg(from._internal_roll_angular_acceleration_deg());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Nav::CopyFrom(const Nav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNES.messages.Nav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nav::IsInitialized() const {
  return true;
}

void Nav::InternalSwap(Nav* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.navigation_files_.InternalSwap(&other->_impl_.navigation_files_);
  _impl_.blockage_.InternalSwap(&other->_impl_.blockage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Nav, _impl_.entity_id_)
      + sizeof(Nav::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(Nav, _impl_.nav_time_ns_)>(
          reinterpret_cast<char*>(&_impl_.nav_time_ns_),
          reinterpret_cast<char*>(&other->_impl_.nav_time_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Nav::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Nav_2eproto_getter, &descriptor_table_Nav_2eproto_once,
      file_level_metadata_Nav_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace CNES
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CNES::messages::Nav_BlockedNode*
Arena::CreateMaybeMessage< ::CNES::messages::Nav_BlockedNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNES::messages::Nav_BlockedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CNES::messages::Nav*
Arena::CreateMaybeMessage< ::CNES::messages::Nav >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNES::messages::Nav >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

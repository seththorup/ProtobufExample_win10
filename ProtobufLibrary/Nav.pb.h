// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nav.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Nav_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Nav_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Nav_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Nav_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Nav_2eproto;
namespace CNES {
namespace messages {
class Nav;
struct NavDefaultTypeInternal;
extern NavDefaultTypeInternal _Nav_default_instance_;
class Nav_BlockedNode;
struct Nav_BlockedNodeDefaultTypeInternal;
extern Nav_BlockedNodeDefaultTypeInternal _Nav_BlockedNode_default_instance_;
}  // namespace messages
}  // namespace CNES
PROTOBUF_NAMESPACE_OPEN
template<> ::CNES::messages::Nav* Arena::CreateMaybeMessage<::CNES::messages::Nav>(Arena*);
template<> ::CNES::messages::Nav_BlockedNode* Arena::CreateMaybeMessage<::CNES::messages::Nav_BlockedNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CNES {
namespace messages {

// ===================================================================

class Nav_BlockedNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNES.messages.Nav.BlockedNode) */ {
 public:
  inline Nav_BlockedNode() : Nav_BlockedNode(nullptr) {}
  ~Nav_BlockedNode() override;
  explicit PROTOBUF_CONSTEXPR Nav_BlockedNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Nav_BlockedNode(const Nav_BlockedNode& from);
  Nav_BlockedNode(Nav_BlockedNode&& from) noexcept
    : Nav_BlockedNode() {
    *this = ::std::move(from);
  }

  inline Nav_BlockedNode& operator=(const Nav_BlockedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nav_BlockedNode& operator=(Nav_BlockedNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Nav_BlockedNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Nav_BlockedNode* internal_default_instance() {
    return reinterpret_cast<const Nav_BlockedNode*>(
               &_Nav_BlockedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Nav_BlockedNode& a, Nav_BlockedNode& b) {
    a.Swap(&b);
  }
  inline void Swap(Nav_BlockedNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nav_BlockedNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Nav_BlockedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Nav_BlockedNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Nav_BlockedNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Nav_BlockedNode& from) {
    Nav_BlockedNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nav_BlockedNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNES.messages.Nav.BlockedNode";
  }
  protected:
  explicit Nav_BlockedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlkdRxNodeIdFieldNumber = 1,
  };
  // uint32 blkd_rx_node_id = 1;
  void clear_blkd_rx_node_id();
  uint32_t blkd_rx_node_id() const;
  void set_blkd_rx_node_id(uint32_t value);
  private:
  uint32_t _internal_blkd_rx_node_id() const;
  void _internal_set_blkd_rx_node_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CNES.messages.Nav.BlockedNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t blkd_rx_node_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Nav_2eproto;
};
// -------------------------------------------------------------------

class Nav final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNES.messages.Nav) */ {
 public:
  inline Nav() : Nav(nullptr) {}
  ~Nav() override;
  explicit PROTOBUF_CONSTEXPR Nav(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Nav(const Nav& from);
  Nav(Nav&& from) noexcept
    : Nav() {
    *this = ::std::move(from);
  }

  inline Nav& operator=(const Nav& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nav& operator=(Nav&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Nav& default_instance() {
    return *internal_default_instance();
  }
  static inline const Nav* internal_default_instance() {
    return reinterpret_cast<const Nav*>(
               &_Nav_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Nav& a, Nav& b) {
    a.Swap(&b);
  }
  inline void Swap(Nav* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nav* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Nav* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Nav>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Nav& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Nav& from) {
    Nav::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nav* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNES.messages.Nav";
  }
  protected:
  explicit Nav(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Nav_BlockedNode BlockedNode;

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationFilesFieldNumber = 14,
    kBlockageFieldNumber = 15,
    kNavTimeNsFieldNumber = 2,
    kLatitudeDegFieldNumber = 3,
    kLongitudeDegFieldNumber = 4,
    kAltitudeMFieldNumber = 5,
    kHeadingDegFieldNumber = 6,
    kPitchDegFieldNumber = 7,
    kRollDegFieldNumber = 8,
    kGuiNodeIconFieldNumber = 9,
    kNavEstimatedFieldNumber = 10,
    kNavTimeSecFieldNumber = 12,
    kSurfaceAltitudeMFieldNumber = 16,
    kLatVelocityMFieldNumber = 17,
    kLonVelocityMFieldNumber = 18,
    kAltVelocityMFieldNumber = 19,
    kLatAccelerationMFieldNumber = 20,
    kLonAccelerationMFieldNumber = 21,
    kAltAccelerationMFieldNumber = 22,
    kHeadingAngularVelocityDegFieldNumber = 23,
    kPitchAngularVelocityDegFieldNumber = 24,
    kRollAngularVelocityDegFieldNumber = 25,
    kHeadingAngularAccelerationDegFieldNumber = 26,
    kPitchAngularAccelerationDegFieldNumber = 27,
    kRollAngularAccelerationDegFieldNumber = 28,
    kEntityIdFieldNumber = 11,
  };
  // repeated string navigation_files = 14;
  int navigation_files_size() const;
  private:
  int _internal_navigation_files_size() const;
  public:
  void clear_navigation_files();
  const std::string& navigation_files(int index) const;
  std::string* mutable_navigation_files(int index);
  void set_navigation_files(int index, const std::string& value);
  void set_navigation_files(int index, std::string&& value);
  void set_navigation_files(int index, const char* value);
  void set_navigation_files(int index, const char* value, size_t size);
  std::string* add_navigation_files();
  void add_navigation_files(const std::string& value);
  void add_navigation_files(std::string&& value);
  void add_navigation_files(const char* value);
  void add_navigation_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& navigation_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_navigation_files();
  private:
  const std::string& _internal_navigation_files(int index) const;
  std::string* _internal_add_navigation_files();
  public:

  // repeated .CNES.messages.Nav.BlockedNode blockage = 15;
  int blockage_size() const;
  private:
  int _internal_blockage_size() const;
  public:
  void clear_blockage();
  ::CNES::messages::Nav_BlockedNode* mutable_blockage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNES::messages::Nav_BlockedNode >*
      mutable_blockage();
  private:
  const ::CNES::messages::Nav_BlockedNode& _internal_blockage(int index) const;
  ::CNES::messages::Nav_BlockedNode* _internal_add_blockage();
  public:
  const ::CNES::messages::Nav_BlockedNode& blockage(int index) const;
  ::CNES::messages::Nav_BlockedNode* add_blockage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNES::messages::Nav_BlockedNode >&
      blockage() const;

  // int64 nav_time_ns = 2;
  void clear_nav_time_ns();
  int64_t nav_time_ns() const;
  void set_nav_time_ns(int64_t value);
  private:
  int64_t _internal_nav_time_ns() const;
  void _internal_set_nav_time_ns(int64_t value);
  public:

  // double latitude_deg = 3;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 4;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // double altitude_m = 5;
  void clear_altitude_m();
  double altitude_m() const;
  void set_altitude_m(double value);
  private:
  double _internal_altitude_m() const;
  void _internal_set_altitude_m(double value);
  public:

  // double heading_deg = 6;
  void clear_heading_deg();
  double heading_deg() const;
  void set_heading_deg(double value);
  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);
  public:

  // double pitch_deg = 7;
  void clear_pitch_deg();
  double pitch_deg() const;
  void set_pitch_deg(double value);
  private:
  double _internal_pitch_deg() const;
  void _internal_set_pitch_deg(double value);
  public:

  // double roll_deg = 8;
  void clear_roll_deg();
  double roll_deg() const;
  void set_roll_deg(double value);
  private:
  double _internal_roll_deg() const;
  void _internal_set_roll_deg(double value);
  public:

  // uint32 gui_node_icon = 9;
  void clear_gui_node_icon();
  uint32_t gui_node_icon() const;
  void set_gui_node_icon(uint32_t value);
  private:
  uint32_t _internal_gui_node_icon() const;
  void _internal_set_gui_node_icon(uint32_t value);
  public:

  // bool nav_estimated = 10;
  void clear_nav_estimated();
  bool nav_estimated() const;
  void set_nav_estimated(bool value);
  private:
  bool _internal_nav_estimated() const;
  void _internal_set_nav_estimated(bool value);
  public:

  // double nav_time_sec = 12;
  void clear_nav_time_sec();
  double nav_time_sec() const;
  void set_nav_time_sec(double value);
  private:
  double _internal_nav_time_sec() const;
  void _internal_set_nav_time_sec(double value);
  public:

  // double surface_altitude_m = 16;
  void clear_surface_altitude_m();
  double surface_altitude_m() const;
  void set_surface_altitude_m(double value);
  private:
  double _internal_surface_altitude_m() const;
  void _internal_set_surface_altitude_m(double value);
  public:

  // double lat_velocity_m = 17;
  void clear_lat_velocity_m();
  double lat_velocity_m() const;
  void set_lat_velocity_m(double value);
  private:
  double _internal_lat_velocity_m() const;
  void _internal_set_lat_velocity_m(double value);
  public:

  // double lon_velocity_m = 18;
  void clear_lon_velocity_m();
  double lon_velocity_m() const;
  void set_lon_velocity_m(double value);
  private:
  double _internal_lon_velocity_m() const;
  void _internal_set_lon_velocity_m(double value);
  public:

  // double alt_velocity_m = 19;
  void clear_alt_velocity_m();
  double alt_velocity_m() const;
  void set_alt_velocity_m(double value);
  private:
  double _internal_alt_velocity_m() const;
  void _internal_set_alt_velocity_m(double value);
  public:

  // double lat_acceleration_m = 20;
  void clear_lat_acceleration_m();
  double lat_acceleration_m() const;
  void set_lat_acceleration_m(double value);
  private:
  double _internal_lat_acceleration_m() const;
  void _internal_set_lat_acceleration_m(double value);
  public:

  // double lon_acceleration_m = 21;
  void clear_lon_acceleration_m();
  double lon_acceleration_m() const;
  void set_lon_acceleration_m(double value);
  private:
  double _internal_lon_acceleration_m() const;
  void _internal_set_lon_acceleration_m(double value);
  public:

  // double alt_acceleration_m = 22;
  void clear_alt_acceleration_m();
  double alt_acceleration_m() const;
  void set_alt_acceleration_m(double value);
  private:
  double _internal_alt_acceleration_m() const;
  void _internal_set_alt_acceleration_m(double value);
  public:

  // double heading_angular_velocity_deg = 23;
  void clear_heading_angular_velocity_deg();
  double heading_angular_velocity_deg() const;
  void set_heading_angular_velocity_deg(double value);
  private:
  double _internal_heading_angular_velocity_deg() const;
  void _internal_set_heading_angular_velocity_deg(double value);
  public:

  // double pitch_angular_velocity_deg = 24;
  void clear_pitch_angular_velocity_deg();
  double pitch_angular_velocity_deg() const;
  void set_pitch_angular_velocity_deg(double value);
  private:
  double _internal_pitch_angular_velocity_deg() const;
  void _internal_set_pitch_angular_velocity_deg(double value);
  public:

  // double roll_angular_velocity_deg = 25;
  void clear_roll_angular_velocity_deg();
  double roll_angular_velocity_deg() const;
  void set_roll_angular_velocity_deg(double value);
  private:
  double _internal_roll_angular_velocity_deg() const;
  void _internal_set_roll_angular_velocity_deg(double value);
  public:

  // double heading_angular_acceleration_deg = 26;
  void clear_heading_angular_acceleration_deg();
  double heading_angular_acceleration_deg() const;
  void set_heading_angular_acceleration_deg(double value);
  private:
  double _internal_heading_angular_acceleration_deg() const;
  void _internal_set_heading_angular_acceleration_deg(double value);
  public:

  // double pitch_angular_acceleration_deg = 27;
  void clear_pitch_angular_acceleration_deg();
  double pitch_angular_acceleration_deg() const;
  void set_pitch_angular_acceleration_deg(double value);
  private:
  double _internal_pitch_angular_acceleration_deg() const;
  void _internal_set_pitch_angular_acceleration_deg(double value);
  public:

  // double roll_angular_acceleration_deg = 28;
  void clear_roll_angular_acceleration_deg();
  double roll_angular_acceleration_deg() const;
  void set_roll_angular_acceleration_deg(double value);
  private:
  double _internal_roll_angular_acceleration_deg() const;
  void _internal_set_roll_angular_acceleration_deg(double value);
  public:

  // uint32 entity_id = 11;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CNES.messages.Nav)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> navigation_files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNES::messages::Nav_BlockedNode > blockage_;
    int64_t nav_time_ns_;
    double latitude_deg_;
    double longitude_deg_;
    double altitude_m_;
    double heading_deg_;
    double pitch_deg_;
    double roll_deg_;
    uint32_t gui_node_icon_;
    bool nav_estimated_;
    double nav_time_sec_;
    double surface_altitude_m_;
    double lat_velocity_m_;
    double lon_velocity_m_;
    double alt_velocity_m_;
    double lat_acceleration_m_;
    double lon_acceleration_m_;
    double alt_acceleration_m_;
    double heading_angular_velocity_deg_;
    double pitch_angular_velocity_deg_;
    double roll_angular_velocity_deg_;
    double heading_angular_acceleration_deg_;
    double pitch_angular_acceleration_deg_;
    double roll_angular_acceleration_deg_;
    uint32_t entity_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Nav_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Nav_BlockedNode

// uint32 blkd_rx_node_id = 1;
inline void Nav_BlockedNode::clear_blkd_rx_node_id() {
  _impl_.blkd_rx_node_id_ = 0u;
}
inline uint32_t Nav_BlockedNode::_internal_blkd_rx_node_id() const {
  return _impl_.blkd_rx_node_id_;
}
inline uint32_t Nav_BlockedNode::blkd_rx_node_id() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.BlockedNode.blkd_rx_node_id)
  return _internal_blkd_rx_node_id();
}
inline void Nav_BlockedNode::_internal_set_blkd_rx_node_id(uint32_t value) {
  
  _impl_.blkd_rx_node_id_ = value;
}
inline void Nav_BlockedNode::set_blkd_rx_node_id(uint32_t value) {
  _internal_set_blkd_rx_node_id(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.BlockedNode.blkd_rx_node_id)
}

// -------------------------------------------------------------------

// Nav

// int64 nav_time_ns = 2;
inline void Nav::clear_nav_time_ns() {
  _impl_.nav_time_ns_ = int64_t{0};
}
inline int64_t Nav::_internal_nav_time_ns() const {
  return _impl_.nav_time_ns_;
}
inline int64_t Nav::nav_time_ns() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.nav_time_ns)
  return _internal_nav_time_ns();
}
inline void Nav::_internal_set_nav_time_ns(int64_t value) {
  
  _impl_.nav_time_ns_ = value;
}
inline void Nav::set_nav_time_ns(int64_t value) {
  _internal_set_nav_time_ns(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.nav_time_ns)
}

// double latitude_deg = 3;
inline void Nav::clear_latitude_deg() {
  _impl_.latitude_deg_ = 0;
}
inline double Nav::_internal_latitude_deg() const {
  return _impl_.latitude_deg_;
}
inline double Nav::latitude_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.latitude_deg)
  return _internal_latitude_deg();
}
inline void Nav::_internal_set_latitude_deg(double value) {
  
  _impl_.latitude_deg_ = value;
}
inline void Nav::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.latitude_deg)
}

// double longitude_deg = 4;
inline void Nav::clear_longitude_deg() {
  _impl_.longitude_deg_ = 0;
}
inline double Nav::_internal_longitude_deg() const {
  return _impl_.longitude_deg_;
}
inline double Nav::longitude_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.longitude_deg)
  return _internal_longitude_deg();
}
inline void Nav::_internal_set_longitude_deg(double value) {
  
  _impl_.longitude_deg_ = value;
}
inline void Nav::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.longitude_deg)
}

// double altitude_m = 5;
inline void Nav::clear_altitude_m() {
  _impl_.altitude_m_ = 0;
}
inline double Nav::_internal_altitude_m() const {
  return _impl_.altitude_m_;
}
inline double Nav::altitude_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.altitude_m)
  return _internal_altitude_m();
}
inline void Nav::_internal_set_altitude_m(double value) {
  
  _impl_.altitude_m_ = value;
}
inline void Nav::set_altitude_m(double value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.altitude_m)
}

// double heading_deg = 6;
inline void Nav::clear_heading_deg() {
  _impl_.heading_deg_ = 0;
}
inline double Nav::_internal_heading_deg() const {
  return _impl_.heading_deg_;
}
inline double Nav::heading_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.heading_deg)
  return _internal_heading_deg();
}
inline void Nav::_internal_set_heading_deg(double value) {
  
  _impl_.heading_deg_ = value;
}
inline void Nav::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.heading_deg)
}

// double pitch_deg = 7;
inline void Nav::clear_pitch_deg() {
  _impl_.pitch_deg_ = 0;
}
inline double Nav::_internal_pitch_deg() const {
  return _impl_.pitch_deg_;
}
inline double Nav::pitch_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.pitch_deg)
  return _internal_pitch_deg();
}
inline void Nav::_internal_set_pitch_deg(double value) {
  
  _impl_.pitch_deg_ = value;
}
inline void Nav::set_pitch_deg(double value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.pitch_deg)
}

// double roll_deg = 8;
inline void Nav::clear_roll_deg() {
  _impl_.roll_deg_ = 0;
}
inline double Nav::_internal_roll_deg() const {
  return _impl_.roll_deg_;
}
inline double Nav::roll_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.roll_deg)
  return _internal_roll_deg();
}
inline void Nav::_internal_set_roll_deg(double value) {
  
  _impl_.roll_deg_ = value;
}
inline void Nav::set_roll_deg(double value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.roll_deg)
}

// uint32 gui_node_icon = 9;
inline void Nav::clear_gui_node_icon() {
  _impl_.gui_node_icon_ = 0u;
}
inline uint32_t Nav::_internal_gui_node_icon() const {
  return _impl_.gui_node_icon_;
}
inline uint32_t Nav::gui_node_icon() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.gui_node_icon)
  return _internal_gui_node_icon();
}
inline void Nav::_internal_set_gui_node_icon(uint32_t value) {
  
  _impl_.gui_node_icon_ = value;
}
inline void Nav::set_gui_node_icon(uint32_t value) {
  _internal_set_gui_node_icon(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.gui_node_icon)
}

// bool nav_estimated = 10;
inline void Nav::clear_nav_estimated() {
  _impl_.nav_estimated_ = false;
}
inline bool Nav::_internal_nav_estimated() const {
  return _impl_.nav_estimated_;
}
inline bool Nav::nav_estimated() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.nav_estimated)
  return _internal_nav_estimated();
}
inline void Nav::_internal_set_nav_estimated(bool value) {
  
  _impl_.nav_estimated_ = value;
}
inline void Nav::set_nav_estimated(bool value) {
  _internal_set_nav_estimated(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.nav_estimated)
}

// uint32 entity_id = 11;
inline void Nav::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t Nav::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t Nav::entity_id() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.entity_id)
  return _internal_entity_id();
}
inline void Nav::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void Nav::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.entity_id)
}

// double nav_time_sec = 12;
inline void Nav::clear_nav_time_sec() {
  _impl_.nav_time_sec_ = 0;
}
inline double Nav::_internal_nav_time_sec() const {
  return _impl_.nav_time_sec_;
}
inline double Nav::nav_time_sec() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.nav_time_sec)
  return _internal_nav_time_sec();
}
inline void Nav::_internal_set_nav_time_sec(double value) {
  
  _impl_.nav_time_sec_ = value;
}
inline void Nav::set_nav_time_sec(double value) {
  _internal_set_nav_time_sec(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.nav_time_sec)
}

// repeated string navigation_files = 14;
inline int Nav::_internal_navigation_files_size() const {
  return _impl_.navigation_files_.size();
}
inline int Nav::navigation_files_size() const {
  return _internal_navigation_files_size();
}
inline void Nav::clear_navigation_files() {
  _impl_.navigation_files_.Clear();
}
inline std::string* Nav::add_navigation_files() {
  std::string* _s = _internal_add_navigation_files();
  // @@protoc_insertion_point(field_add_mutable:CNES.messages.Nav.navigation_files)
  return _s;
}
inline const std::string& Nav::_internal_navigation_files(int index) const {
  return _impl_.navigation_files_.Get(index);
}
inline const std::string& Nav::navigation_files(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.navigation_files)
  return _internal_navigation_files(index);
}
inline std::string* Nav::mutable_navigation_files(int index) {
  // @@protoc_insertion_point(field_mutable:CNES.messages.Nav.navigation_files)
  return _impl_.navigation_files_.Mutable(index);
}
inline void Nav::set_navigation_files(int index, const std::string& value) {
  _impl_.navigation_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.navigation_files)
}
inline void Nav::set_navigation_files(int index, std::string&& value) {
  _impl_.navigation_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.navigation_files)
}
inline void Nav::set_navigation_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.navigation_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CNES.messages.Nav.navigation_files)
}
inline void Nav::set_navigation_files(int index, const char* value, size_t size) {
  _impl_.navigation_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CNES.messages.Nav.navigation_files)
}
inline std::string* Nav::_internal_add_navigation_files() {
  return _impl_.navigation_files_.Add();
}
inline void Nav::add_navigation_files(const std::string& value) {
  _impl_.navigation_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CNES.messages.Nav.navigation_files)
}
inline void Nav::add_navigation_files(std::string&& value) {
  _impl_.navigation_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CNES.messages.Nav.navigation_files)
}
inline void Nav::add_navigation_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.navigation_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CNES.messages.Nav.navigation_files)
}
inline void Nav::add_navigation_files(const char* value, size_t size) {
  _impl_.navigation_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CNES.messages.Nav.navigation_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Nav::navigation_files() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Nav.navigation_files)
  return _impl_.navigation_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Nav::mutable_navigation_files() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Nav.navigation_files)
  return &_impl_.navigation_files_;
}

// repeated .CNES.messages.Nav.BlockedNode blockage = 15;
inline int Nav::_internal_blockage_size() const {
  return _impl_.blockage_.size();
}
inline int Nav::blockage_size() const {
  return _internal_blockage_size();
}
inline void Nav::clear_blockage() {
  _impl_.blockage_.Clear();
}
inline ::CNES::messages::Nav_BlockedNode* Nav::mutable_blockage(int index) {
  // @@protoc_insertion_point(field_mutable:CNES.messages.Nav.blockage)
  return _impl_.blockage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNES::messages::Nav_BlockedNode >*
Nav::mutable_blockage() {
  // @@protoc_insertion_point(field_mutable_list:CNES.messages.Nav.blockage)
  return &_impl_.blockage_;
}
inline const ::CNES::messages::Nav_BlockedNode& Nav::_internal_blockage(int index) const {
  return _impl_.blockage_.Get(index);
}
inline const ::CNES::messages::Nav_BlockedNode& Nav::blockage(int index) const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.blockage)
  return _internal_blockage(index);
}
inline ::CNES::messages::Nav_BlockedNode* Nav::_internal_add_blockage() {
  return _impl_.blockage_.Add();
}
inline ::CNES::messages::Nav_BlockedNode* Nav::add_blockage() {
  ::CNES::messages::Nav_BlockedNode* _add = _internal_add_blockage();
  // @@protoc_insertion_point(field_add:CNES.messages.Nav.blockage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNES::messages::Nav_BlockedNode >&
Nav::blockage() const {
  // @@protoc_insertion_point(field_list:CNES.messages.Nav.blockage)
  return _impl_.blockage_;
}

// double surface_altitude_m = 16;
inline void Nav::clear_surface_altitude_m() {
  _impl_.surface_altitude_m_ = 0;
}
inline double Nav::_internal_surface_altitude_m() const {
  return _impl_.surface_altitude_m_;
}
inline double Nav::surface_altitude_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.surface_altitude_m)
  return _internal_surface_altitude_m();
}
inline void Nav::_internal_set_surface_altitude_m(double value) {
  
  _impl_.surface_altitude_m_ = value;
}
inline void Nav::set_surface_altitude_m(double value) {
  _internal_set_surface_altitude_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.surface_altitude_m)
}

// double lat_velocity_m = 17;
inline void Nav::clear_lat_velocity_m() {
  _impl_.lat_velocity_m_ = 0;
}
inline double Nav::_internal_lat_velocity_m() const {
  return _impl_.lat_velocity_m_;
}
inline double Nav::lat_velocity_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.lat_velocity_m)
  return _internal_lat_velocity_m();
}
inline void Nav::_internal_set_lat_velocity_m(double value) {
  
  _impl_.lat_velocity_m_ = value;
}
inline void Nav::set_lat_velocity_m(double value) {
  _internal_set_lat_velocity_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.lat_velocity_m)
}

// double lon_velocity_m = 18;
inline void Nav::clear_lon_velocity_m() {
  _impl_.lon_velocity_m_ = 0;
}
inline double Nav::_internal_lon_velocity_m() const {
  return _impl_.lon_velocity_m_;
}
inline double Nav::lon_velocity_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.lon_velocity_m)
  return _internal_lon_velocity_m();
}
inline void Nav::_internal_set_lon_velocity_m(double value) {
  
  _impl_.lon_velocity_m_ = value;
}
inline void Nav::set_lon_velocity_m(double value) {
  _internal_set_lon_velocity_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.lon_velocity_m)
}

// double alt_velocity_m = 19;
inline void Nav::clear_alt_velocity_m() {
  _impl_.alt_velocity_m_ = 0;
}
inline double Nav::_internal_alt_velocity_m() const {
  return _impl_.alt_velocity_m_;
}
inline double Nav::alt_velocity_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.alt_velocity_m)
  return _internal_alt_velocity_m();
}
inline void Nav::_internal_set_alt_velocity_m(double value) {
  
  _impl_.alt_velocity_m_ = value;
}
inline void Nav::set_alt_velocity_m(double value) {
  _internal_set_alt_velocity_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.alt_velocity_m)
}

// double lat_acceleration_m = 20;
inline void Nav::clear_lat_acceleration_m() {
  _impl_.lat_acceleration_m_ = 0;
}
inline double Nav::_internal_lat_acceleration_m() const {
  return _impl_.lat_acceleration_m_;
}
inline double Nav::lat_acceleration_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.lat_acceleration_m)
  return _internal_lat_acceleration_m();
}
inline void Nav::_internal_set_lat_acceleration_m(double value) {
  
  _impl_.lat_acceleration_m_ = value;
}
inline void Nav::set_lat_acceleration_m(double value) {
  _internal_set_lat_acceleration_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.lat_acceleration_m)
}

// double lon_acceleration_m = 21;
inline void Nav::clear_lon_acceleration_m() {
  _impl_.lon_acceleration_m_ = 0;
}
inline double Nav::_internal_lon_acceleration_m() const {
  return _impl_.lon_acceleration_m_;
}
inline double Nav::lon_acceleration_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.lon_acceleration_m)
  return _internal_lon_acceleration_m();
}
inline void Nav::_internal_set_lon_acceleration_m(double value) {
  
  _impl_.lon_acceleration_m_ = value;
}
inline void Nav::set_lon_acceleration_m(double value) {
  _internal_set_lon_acceleration_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.lon_acceleration_m)
}

// double alt_acceleration_m = 22;
inline void Nav::clear_alt_acceleration_m() {
  _impl_.alt_acceleration_m_ = 0;
}
inline double Nav::_internal_alt_acceleration_m() const {
  return _impl_.alt_acceleration_m_;
}
inline double Nav::alt_acceleration_m() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.alt_acceleration_m)
  return _internal_alt_acceleration_m();
}
inline void Nav::_internal_set_alt_acceleration_m(double value) {
  
  _impl_.alt_acceleration_m_ = value;
}
inline void Nav::set_alt_acceleration_m(double value) {
  _internal_set_alt_acceleration_m(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.alt_acceleration_m)
}

// double heading_angular_velocity_deg = 23;
inline void Nav::clear_heading_angular_velocity_deg() {
  _impl_.heading_angular_velocity_deg_ = 0;
}
inline double Nav::_internal_heading_angular_velocity_deg() const {
  return _impl_.heading_angular_velocity_deg_;
}
inline double Nav::heading_angular_velocity_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.heading_angular_velocity_deg)
  return _internal_heading_angular_velocity_deg();
}
inline void Nav::_internal_set_heading_angular_velocity_deg(double value) {
  
  _impl_.heading_angular_velocity_deg_ = value;
}
inline void Nav::set_heading_angular_velocity_deg(double value) {
  _internal_set_heading_angular_velocity_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.heading_angular_velocity_deg)
}

// double pitch_angular_velocity_deg = 24;
inline void Nav::clear_pitch_angular_velocity_deg() {
  _impl_.pitch_angular_velocity_deg_ = 0;
}
inline double Nav::_internal_pitch_angular_velocity_deg() const {
  return _impl_.pitch_angular_velocity_deg_;
}
inline double Nav::pitch_angular_velocity_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.pitch_angular_velocity_deg)
  return _internal_pitch_angular_velocity_deg();
}
inline void Nav::_internal_set_pitch_angular_velocity_deg(double value) {
  
  _impl_.pitch_angular_velocity_deg_ = value;
}
inline void Nav::set_pitch_angular_velocity_deg(double value) {
  _internal_set_pitch_angular_velocity_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.pitch_angular_velocity_deg)
}

// double roll_angular_velocity_deg = 25;
inline void Nav::clear_roll_angular_velocity_deg() {
  _impl_.roll_angular_velocity_deg_ = 0;
}
inline double Nav::_internal_roll_angular_velocity_deg() const {
  return _impl_.roll_angular_velocity_deg_;
}
inline double Nav::roll_angular_velocity_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.roll_angular_velocity_deg)
  return _internal_roll_angular_velocity_deg();
}
inline void Nav::_internal_set_roll_angular_velocity_deg(double value) {
  
  _impl_.roll_angular_velocity_deg_ = value;
}
inline void Nav::set_roll_angular_velocity_deg(double value) {
  _internal_set_roll_angular_velocity_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.roll_angular_velocity_deg)
}

// double heading_angular_acceleration_deg = 26;
inline void Nav::clear_heading_angular_acceleration_deg() {
  _impl_.heading_angular_acceleration_deg_ = 0;
}
inline double Nav::_internal_heading_angular_acceleration_deg() const {
  return _impl_.heading_angular_acceleration_deg_;
}
inline double Nav::heading_angular_acceleration_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.heading_angular_acceleration_deg)
  return _internal_heading_angular_acceleration_deg();
}
inline void Nav::_internal_set_heading_angular_acceleration_deg(double value) {
  
  _impl_.heading_angular_acceleration_deg_ = value;
}
inline void Nav::set_heading_angular_acceleration_deg(double value) {
  _internal_set_heading_angular_acceleration_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.heading_angular_acceleration_deg)
}

// double pitch_angular_acceleration_deg = 27;
inline void Nav::clear_pitch_angular_acceleration_deg() {
  _impl_.pitch_angular_acceleration_deg_ = 0;
}
inline double Nav::_internal_pitch_angular_acceleration_deg() const {
  return _impl_.pitch_angular_acceleration_deg_;
}
inline double Nav::pitch_angular_acceleration_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.pitch_angular_acceleration_deg)
  return _internal_pitch_angular_acceleration_deg();
}
inline void Nav::_internal_set_pitch_angular_acceleration_deg(double value) {
  
  _impl_.pitch_angular_acceleration_deg_ = value;
}
inline void Nav::set_pitch_angular_acceleration_deg(double value) {
  _internal_set_pitch_angular_acceleration_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.pitch_angular_acceleration_deg)
}

// double roll_angular_acceleration_deg = 28;
inline void Nav::clear_roll_angular_acceleration_deg() {
  _impl_.roll_angular_acceleration_deg_ = 0;
}
inline double Nav::_internal_roll_angular_acceleration_deg() const {
  return _impl_.roll_angular_acceleration_deg_;
}
inline double Nav::roll_angular_acceleration_deg() const {
  // @@protoc_insertion_point(field_get:CNES.messages.Nav.roll_angular_acceleration_deg)
  return _internal_roll_angular_acceleration_deg();
}
inline void Nav::_internal_set_roll_angular_acceleration_deg(double value) {
  
  _impl_.roll_angular_acceleration_deg_ = value;
}
inline void Nav::set_roll_angular_acceleration_deg(double value) {
  _internal_set_roll_angular_acceleration_deg(value);
  // @@protoc_insertion_point(field_set:CNES.messages.Nav.roll_angular_acceleration_deg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace CNES

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Nav_2eproto
